// no need for tagger now
// next time add "two" and "three" to m1
model Abstraction3
//package Abstraction3

  // only one external type: the validity report (generated by the dummy masker)

  // only simple external functions: prints and getters (they are necessary if we deal with an external type)

  port type innerTransition
    
  port type transferRecordDatabase(int replicaIDofTheDetectorOwningTheDB, int replicaID, bool validityReplica, int consecutiveFaultyReports)
 
  port type validityReportPort
  
  port type validityReportPortNew(int replicaIDValidityReport, int controllerTimestampValidityReport, int detectorTimestampValidityReport, int healthValidityReport, bool validValidityReport)

  //port type performCheckWithDatabaseAndReports(int result, int replicaIDValidityReport, int controllerTimestampValidityReport, int detectorTimestampValidityReport, int healthValidityReport, bool validValidityReport)

  port type performCheckInsideDatabase

  atomic type Masker(int id) 
    data int replicaID
    data int one
    data int zero
    data int maxConsecutiveFaultyReports
    
    // validity report fields
    data int replicaIDValidityReport
	data int controllerTimestampValidityReport
	data int detectorTimestampValidityReport
	data int healthValidityReport
	data bool validValidityReport
	
	data int controllerTimestampGenerator
	data int detectorTimestampGenerator
    
    export port validityReportPortNew sendReport(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)
    export port validityReportPort generateReport


    place HAVE_A_REPORT_TO_SEND, REPORT_SENT

	// this part can be changed, if we want to perform tests with different reports
    initial to HAVE_A_REPORT_TO_SEND
	do {
	
		one = 1;
		zero = 0;
		replicaID = id;
		maxConsecutiveFaultyReports = 10;
		
		controllerTimestampGenerator = 1;
		detectorTimestampGenerator = 1;
		healthValidityReport = 0;
		replicaIDValidityReport = replicaID;
		controllerTimestampValidityReport = controllerTimestampGenerator;
		detectorTimestampValidityReport = detectorTimestampGenerator;
		validValidityReport = true;
		
	//	controllerTimestampGenerator = controllerTimestampGenerator + 1;
	//	detectorTimestampGenerator = detectorTimestampGenerator + 1;
		
	}

    on sendReport from HAVE_A_REPORT_TO_SEND to REPORT_SENT
    on generateReport from REPORT_SENT to HAVE_A_REPORT_TO_SEND
		do {
		
			replicaIDValidityReport = replicaID;
			controllerTimestampValidityReport = controllerTimestampGenerator;
			detectorTimestampValidityReport = detectorTimestampGenerator;
			validValidityReport = false;
			//healthValidityReport = healthValidityReport
		//	controllerTimestampGenerator = controllerTimestampGenerator + 1;
		//	detectorTimestampGenerator = detectorTimestampGenerator + 1;
			
		}
  end
  
  atomic type DatabaseReplicas(int id) 
    data int ownerID
    
    data int consecutiveFaultyReports1
    data int replicaID1
	data bool validityReplica1
	
    data int consecutiveFaultyReports2
	data int replicaID2
	data bool validityReplica2
	
    data int consecutiveFaultyReports3
	data int replicaID3
	data bool validityReplica3
	

	// maybe temporary
	// export port performCheckInsideDatabase backToBeginningState

	export port transferRecordDatabase chooseRecord1(ownerID, replicaID1, validityReplica1, consecutiveFaultyReports1)
	export port transferRecordDatabase chooseRecord2(ownerID, replicaID2, validityReplica2, consecutiveFaultyReports2)
	export port transferRecordDatabase chooseRecord3(ownerID, replicaID3, validityReplica3, consecutiveFaultyReports3)
	
	export port transferRecordDatabase update1(ownerID, replicaID1, validityReplica1, consecutiveFaultyReports1)
	export port transferRecordDatabase update2(ownerID, replicaID2, validityReplica2, consecutiveFaultyReports2)
	export port transferRecordDatabase update3(ownerID, replicaID3, validityReplica3, consecutiveFaultyReports3)
	
	export port transferRecordDatabase noUpdate1(ownerID, replicaID1, validityReplica1, consecutiveFaultyReports1)
	export port transferRecordDatabase noUpdate2(ownerID, replicaID2, validityReplica2, consecutiveFaultyReports2)
	export port transferRecordDatabase noUpdate3(ownerID, replicaID3, validityReplica3, consecutiveFaultyReports3)
	
	export port transferRecordDatabase faultyReport1(ownerID, replicaID1, validityReplica1, consecutiveFaultyReports1)
	export port transferRecordDatabase faultyReport2(ownerID, replicaID2, validityReplica2, consecutiveFaultyReports2)
	export port transferRecordDatabase faultyReport3(ownerID, replicaID3, validityReplica3, consecutiveFaultyReports3)

	export port transferRecordDatabase nonFaultyReport1(ownerID, replicaID1, validityReplica1, consecutiveFaultyReports1)
	export port transferRecordDatabase nonFaultyReport2(ownerID, replicaID2, validityReplica2, consecutiveFaultyReports2)
	export port transferRecordDatabase nonFaultyReport3(ownerID, replicaID3, validityReplica3, consecutiveFaultyReports3)


	
	export port transferRecordDatabase performCheckDelay1(ownerID, replicaID1, validityReplica1, consecutiveFaultyReports1)
	export port transferRecordDatabase performCheckDelay2(ownerID, replicaID2, validityReplica2, consecutiveFaultyReports2)
	export port transferRecordDatabase performCheckDelay3(ownerID, replicaID3, validityReplica3, consecutiveFaultyReports3)
	


	export port transferRecordDatabase finish1(ownerID, replicaID1, validityReplica1, consecutiveFaultyReports1)
	export port transferRecordDatabase finish2(ownerID, replicaID2, validityReplica2, consecutiveFaultyReports2)
	export port transferRecordDatabase finish3(ownerID, replicaID3, validityReplica3, consecutiveFaultyReports3)

	export port transferRecordDatabase continue1(ownerID, replicaID1, validityReplica1, consecutiveFaultyReports1)
	export port transferRecordDatabase continue2(ownerID, replicaID2, validityReplica2, consecutiveFaultyReports2)
	export port transferRecordDatabase continue3(ownerID, replicaID3, validityReplica3, consecutiveFaultyReports3)

	
	
	export port transferRecordDatabase noDetectDelayFault1(ownerID, replicaID1, validityReplica1, consecutiveFaultyReports1)
	export port transferRecordDatabase noDetectDelayFault2(ownerID, replicaID2, validityReplica2, consecutiveFaultyReports2)
	export port transferRecordDatabase noDetectDelayFault3(ownerID, replicaID3, validityReplica3, consecutiveFaultyReports3)

	
	export port transferRecordDatabase detectDelayFault1(ownerID, replicaID1, validityReplica1, consecutiveFaultyReports1)
	export port transferRecordDatabase detectDelayFault2(ownerID, replicaID2, validityReplica2, consecutiveFaultyReports2)
	export port transferRecordDatabase detectDelayFault3(ownerID, replicaID3, validityReplica3, consecutiveFaultyReports3)


	export port transferRecordDatabase detectCrashFault1(ownerID, replicaID1, validityReplica1, consecutiveFaultyReports1)
	export port transferRecordDatabase detectCrashFault2(ownerID, replicaID2, validityReplica2, consecutiveFaultyReports2)
	export port transferRecordDatabase detectCrashFault3(ownerID, replicaID3, validityReplica3, consecutiveFaultyReports3)
	
	export port transferRecordDatabase noDetectCrashFault1(ownerID, replicaID1, validityReplica1, consecutiveFaultyReports1)
	export port transferRecordDatabase noDetectCrashFault2(ownerID, replicaID2, validityReplica2, consecutiveFaultyReports2)
	export port transferRecordDatabase noDetectCrashFault3(ownerID, replicaID3, validityReplica3, consecutiveFaultyReports3)
	
	export port transferRecordDatabase continueCrash1(ownerID, replicaID1, validityReplica1, consecutiveFaultyReports1)
	export port transferRecordDatabase continueCrash2(ownerID, replicaID2, validityReplica2, consecutiveFaultyReports2)
	export port transferRecordDatabase continueCrash3(ownerID, replicaID3, validityReplica3, consecutiveFaultyReports3)
	
	
	export port performCheckInsideDatabase performCheckCrash1
	export port performCheckInsideDatabase performCheckCrash2
	export port performCheckInsideDatabase performCheckCrash3
	
	export port performCheckInsideDatabase performCheckDetectors1
	export port performCheckInsideDatabase performCheckDetectors2
	export port performCheckInsideDatabase performCheckDetectors3
	
	
	export port performCheckInsideDatabase backToBeginningState

	export port performCheckInsideDatabase init1
	export port performCheckInsideDatabase init2
	export port performCheckInsideDatabase init3

	

	data int maxControllerTS
	data int maxDetectorTS

	// new set of places: some of them will be the same in the detectors
	// this is needed to keep the DB and the detector synchronized
	place START, READY_TO_UPDATE, CHOSEN_RECORD1, CHOSEN_RECORD2, CHOSEN_RECORD3,
	 UPDATE1, UPDATE2, UPDATE3,
	 UPDATED1, UPDATED2, UPDATED3,
	 NOUPDATE1, NOUPDATE2, NOUPDATE3,
	 FINISHED_CHECK_DELAY1, FINISHED_CHECK_DELAY2, FINISHED_CHECK_DELAY3,
	 CHECKING_DELAY1, CHECKING_DELAY2, CHECKING_DELAY3,
	 DELAY_FAULTY1, DELAY_FAULTY2, DELAY_FAULTY3,
	 CHECKED_DELAY1, CHECKED_DELAY2, CHECKED_DELAY3,
	 CHECKED_CRASH1, CHECKED_CRASH2, CHECKED_CRASH3,
	 CHECKING_CRASH1, CHECKING_CRASH2, CHECKING_CRASH3,
	 CHECKED_DETECTORS1, CHECKED_DETECTORS2, CHECKED_DETECTORS3,
	 CHECKING_DETECTORS1, CHECKING_DETECTORS2, CHECKING_DETECTORS3,
	 CRASH_FAULTY1, CRASH_FAULTY2, CRASH_FAULTY3,
	 FINISHED,
	 READY_TO_CHECK, CHECKING_CRASH, CHECKING_DETECTORS,
	CHECKED_DELAY, CHECKED_CRASH, CHECKED_DETECTORS,
	 START_CHECKING_CRASH,
	 START_CHECKING_DETECTORS, DETERMINED_MAX_DETECTOR_TS, LAST_DETECTOR1_CHECKED, LAST_DETECTOR2_CHECKED

	// initialize the database. This part is based on the detector on which the database is located
	
	initial to START
		do {
			replicaID1 = 1; replicaID2 = 2; replicaID3 = 3;
			ownerID = id;
			consecutiveFaultyReports1 = 0;
			consecutiveFaultyReports2 = 0;
			consecutiveFaultyReports3 = 0;
			maxControllerTS = 0;
		}
	
	on init1 from START to READY_TO_UPDATE provided (ownerID == 1)
		do {
		//	lastControllerTSReplica1 = 0;
		//	lastDetectorTSReplica1 = 0;
		//	firstControllerTSReplica1 = 0;
		//	healthReplica1 = 127;
			validityReplica1 = true;
		}
	on init2 from START to READY_TO_UPDATE provided (ownerID == 2)
		do {
		//	lastControllerTSReplica2 = 0;
		//	lastDetectorTSReplica2 = 0;
		//	firstControllerTSReplica2 = 0;
		//	healthReplica2 = 127;
			validityReplica2 = true;
		}
	on init3 from START to READY_TO_UPDATE provided (ownerID == 3)
		do {
		//	lastControllerTSReplica3 = 0;
		//	lastDetectorTSReplica3 = 0;
		//	firstControllerTSReplica3 = 0;
		//	healthReplica3 = 127;
			validityReplica3 = true;
		}
		
			
	//	}
	
	// to choose the record to work on
	
	on chooseRecord1 from READY_TO_UPDATE to CHOSEN_RECORD1 //do { printf("Adding the record related to replica 1 to the DB (on the DATABASE %d)\n", ownerID); }
	on chooseRecord2 from READY_TO_UPDATE to CHOSEN_RECORD2 //do { printf("Adding the record related to replica 2 to the DB (on the DATABASE %d)\n", ownerID); }
	on chooseRecord3 from READY_TO_UPDATE to CHOSEN_RECORD3 //do { printf("Adding the record related to replica 3 to the DB (on the DATABASE %d)\n", ownerID); }
	
	// these are the 3 possibilities once a record is chosen. All these paths should lead to the READY_TO_CHECK state
	// in a finite number of steps

	on update1 from CHOSEN_RECORD1 to UPDATE1
	on update2 from CHOSEN_RECORD2 to UPDATE2
	on update3 from CHOSEN_RECORD3 to UPDATE3
	
	on faultyReport1 from UPDATE1 to UPDATED1 //provided(validityReplica1 == false) do { consecutiveFaultyReports1 = consecutiveFaultyReports1 + 1; }
	on faultyReport2 from UPDATE2 to UPDATED2 //provided(validityReplica2 == false) do { consecutiveFaultyReports2 = consecutiveFaultyReports2 + 1; }
	on faultyReport3 from UPDATE3 to UPDATED3 //provided(validityReplica3 == false) do { consecutiveFaultyReports3 = consecutiveFaultyReports3 + 1; }
	
	on nonFaultyReport1 from UPDATE1 to UPDATED1 //provided(validityReplica1 == true) do { consecutiveFaultyReports1 = consecutiveFaultyReports1 - 1; }
	on nonFaultyReport2 from UPDATE2 to UPDATED2 //provided(validityReplica2 == true) do { consecutiveFaultyReports2 = consecutiveFaultyReports2 - 1; }
	on nonFaultyReport3 from UPDATE3 to UPDATED3 //provided(validityReplica3 == true) do { consecutiveFaultyReports3 = consecutiveFaultyReports3 - 1; }

	
	
	on noUpdate1 from CHOSEN_RECORD1 to NOUPDATE1
	on noUpdate2 from CHOSEN_RECORD2 to NOUPDATE2
	on noUpdate3 from CHOSEN_RECORD3 to NOUPDATE3
	
	on performCheckDelay1 from NOUPDATE1 to CHECKING_DELAY1
	on performCheckDelay2 from NOUPDATE2 to CHECKING_DELAY2
	on performCheckDelay3 from NOUPDATE3 to CHECKING_DELAY3
	
	on performCheckDelay1 from UPDATED1 to CHECKING_DELAY1
	on performCheckDelay2 from UPDATED2 to CHECKING_DELAY2
	on performCheckDelay3 from UPDATED3 to CHECKING_DELAY3
	
	
	// need to reset the consecutiveFaultyReports variables
	on detectDelayFault1 from CHECKING_DELAY1 to DELAY_FAULTY1 provided(consecutiveFaultyReports1 == 10)
	on detectDelayFault2 from CHECKING_DELAY2 to DELAY_FAULTY2 provided(consecutiveFaultyReports2 == 10)
	on detectDelayFault3 from CHECKING_DELAY3 to DELAY_FAULTY3 provided(consecutiveFaultyReports3 == 10)

	on continue1 from DELAY_FAULTY1 to CHECKED_DELAY1 do { consecutiveFaultyReports1 = 0; }
	on continue2 from DELAY_FAULTY2 to CHECKED_DELAY2 do { consecutiveFaultyReports2 = 0; }
	on continue3 from DELAY_FAULTY3 to CHECKED_DELAY3 do { consecutiveFaultyReports3 = 0; }

	on noDetectDelayFault1 from CHECKING_DELAY1 to CHECKED_DELAY1 provided (consecutiveFaultyReports1 < 10)
	on noDetectDelayFault2 from CHECKING_DELAY2 to CHECKED_DELAY2 provided (consecutiveFaultyReports2 < 10)
	on noDetectDelayFault3 from CHECKING_DELAY3 to CHECKED_DELAY3 provided (consecutiveFaultyReports3 < 10)

	
	on performCheckCrash1 from CHECKED_DELAY1 to CHECKING_CRASH1
	on performCheckCrash2 from CHECKED_DELAY2 to CHECKING_CRASH2
	on performCheckCrash3 from CHECKED_DELAY3 to CHECKING_CRASH3
	


	// how to make this consistent with the past received values? kind of hard
	on detectCrashFault1 from CHECKING_CRASH1 to CRASH_FAULTY1 provided(maxControllerTS == 1)
	on detectCrashFault2 from CHECKING_CRASH2 to CRASH_FAULTY2 provided(maxControllerTS == 2)
	on detectCrashFault3 from CHECKING_CRASH3 to CRASH_FAULTY3 provided(maxControllerTS == 3)
	
	on continueCrash1 from CRASH_FAULTY1 to CHECKED_CRASH1
	on continueCrash2 from CRASH_FAULTY2 to CHECKED_CRASH2
	on continueCrash3 from CRASH_FAULTY3 to CHECKED_CRASH3
	
	on noDetectCrashFault1 from CHECKING_CRASH1 to CHECKED_CRASH1 provided(maxControllerTS != 1)
	on noDetectCrashFault2 from CHECKING_CRASH2 to CHECKED_CRASH2 provided(maxControllerTS != 2)
	on noDetectCrashFault3 from CHECKING_CRASH3 to CHECKED_CRASH3 provided(maxControllerTS != 3)


	on performCheckDetectors1 from CHECKED_CRASH1 to CHECKED_DETECTORS1
	on performCheckDetectors2 from CHECKED_CRASH2 to CHECKED_DETECTORS2
	on performCheckDetectors3 from CHECKED_CRASH3 to CHECKED_DETECTORS3


	on finish1 from CHECKED_DETECTORS1 to FINISHED
	on finish2 from CHECKED_DETECTORS2 to FINISHED
	on finish3 from CHECKED_DETECTORS3 to FINISHED

	
	on backToBeginningState from FINISHED to READY_TO_UPDATE
  
    
  end

  atomic type DetectorReplica(int id)
    // variables of the detector
    
    data int replicaID
    data int detectorTimestamp
    data int detectorHealth
    
    data int checkResultDelay
    data int checkResultCrash
    data int checkResultDetectors
    
    // validity report variables
    data int replicaIDValidityReport
	data int controllerTimestampValidityReport
	data int detectorTimestampValidityReport
	data int healthValidityReport
	data bool validValidityReport
	
	export port validityReportPortNew receiveReportNew(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)

   // export port validityReportPortNew updateDatabaseNew(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)

    export port validityReportPortNew chooseRecord(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)
    export port validityReportPortNew update(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)
	export port validityReportPortNew noUpdate(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)
	export port validityReportPortNew faultyReport(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)
	export port validityReportPortNew nonFaultyReport(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)
	export port validityReportPortNew performCheckDelay(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)
	export port validityReportPortNew performCheckCrash(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)
	export port validityReportPortNew performCheckDetectors(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)
	export port validityReportPortNew backToBeginningState(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)
        
        
    port innerTransition performCheckCrashAndNotifyRebooter
    port innerTransition performCheckDetectorsAndNotifyRebooter
    
   // export port innerTransition backToBeginningState
    port innerTransition backToBeginningStateNotifyRebooter 	// the type of this port has to be changed!!
        
	//place READY_TO_RECEIVE_REPORT, REPORT_RECEIVED, READY_TO_CHECK, CHECKING_DELAY, CHECKING_CRASH, CHECKING_DETECTORS

	// let's use some common states for the update of the DB: there are some states with the same name as the databases'
	place READY_TO_RECEIVE_REPORT, REPORT_RECEIVED,
	 CHOSEN_RECORD, UPDATE, UPDATED, NOUPDATED,
	 CHECKING_DELAY, CHECKING_CRASH, CHECKING_DETECTORS


	// the database should initialize itself, on its own
    initial to READY_TO_RECEIVE_REPORT
		do { 	
			replicaID = id;
			controllerTimestampValidityReport = -1;
			detectorTimestampValidityReport = -1;
		}
 // the the data transfer is specified in the connector
 // I have to change the port!
    on receiveReportNew from READY_TO_RECEIVE_REPORT to REPORT_RECEIVED
	
	on chooseRecord from REPORT_RECEIVED to CHOSEN_RECORD
		// these are the 3 possibilities once a record is chosen. All these paths should lead to the READY_TO_CHECK state
	// in a finite number of steps
    
    on update from CHOSEN_RECORD to UPDATE provided(controllerTimestampValidityReport != 0)
    
    on noUpdate from CHOSEN_RECORD to NOUPDATED provided(controllerTimestampValidityReport == 0)
    
    
    on faultyReport from UPDATE to UPDATED // provided(validValidityReport == false)
    
    on nonFaultyReport from UPDATE to UPDATED // provided(validValidityReport == true)
    
    
    on performCheckDelay from NOUPDATED to CHECKING_DELAY
    
    on performCheckDelay from UPDATED to CHECKING_DELAY
    
    // another connector is needed here
    on performCheckCrash from CHECKING_DELAY to CHECKING_CRASH 

    
    
    on performCheckDetectors from CHECKING_CRASH to CHECKING_DETECTORS 

    
    
    on backToBeginningState from CHECKING_DETECTORS to READY_TO_RECEIVE_REPORT


  end

  connector type BeginUpdateDatabase(transferRecordDatabase chooseRecordOnDatabase, validityReportPortNew chooseRecordOnDetector)
		define chooseRecordOnDatabase chooseRecordOnDetector
		
		on chooseRecordOnDatabase chooseRecordOnDetector provided (chooseRecordOnDatabase.replicaID == chooseRecordOnDetector.replicaIDValidityReport)
		down {
		}
  end 

  connector type TransferValidityReport(validityReportPortNew masker, validityReportPortNew detector1) //, validityReportPortNew detector2, validityReportPortNew detector3)
    define masker detector1 // detector2 detector3

   // on masker detector1 detector2 detector3
    on masker detector1 
	down { 
		//detector1.report = masker.report; printReport(detector1.report);
		detector1.replicaIDValidityReport = masker.replicaIDValidityReport;
		detector1.controllerTimestampValidityReport = masker.controllerTimestampValidityReport;
		detector1.detectorTimestampValidityReport = masker.detectorTimestampValidityReport;
		detector1.healthValidityReport = masker.healthValidityReport;
		detector1.validValidityReport = masker.validValidityReport;
		
	//	detector2.report = masker.report; printReport(detector2.report);
	//	detector2.replicaIDValidityReport = masker.replicaIDValidityReport;
	//	detector2.controllerTimestampValidityReport = masker.controllerTimestampValidityReport;
	//	detector2.detectorTimestampValidityReport = masker.detectorTimestampValidityReport;
	//	detector2.healthValidityReport = masker.healthValidityReport;
	//	detector2.validValidityReport = masker.validValidityReport;
		
		
	//	detector3.report = masker.report; printReport(detector3.report);
	//	detector3.replicaIDValidityReport = masker.replicaIDValidityReport;
	//	detector3.controllerTimestampValidityReport = masker.controllerTimestampValidityReport;
	//	detector3.detectorTimestampValidityReport = masker.detectorTimestampValidityReport;
	//	detector3.healthValidityReport = masker.healthValidityReport;
	//	detector3.validValidityReport = masker.validValidityReport;
		
	}
  end
  
 
  
    connector type PerformCheckCrash(performCheckInsideDatabase performCheckCrashReplica, validityReportPortNew performCheckCrash)
	define performCheckCrashReplica performCheckCrash
	
	on performCheckCrashReplica performCheckCrash
		down {
		}
  end
  
  connector type PerformCheckDetectors(performCheckInsideDatabase performCheckDetectorsReplica, validityReportPortNew performCheckDetectors)
	define performCheckDetectorsReplica performCheckDetectors
	
	on performCheckDetectorsReplica performCheckDetectors
		down {
		}	
  end
  
  connector type BackToBeginningState(performCheckInsideDatabase backToBeginningStateDatabase, innerTransition backToBeginningStateDetector)
	define backToBeginningStateDatabase backToBeginningStateDetector
	
	on backToBeginningStateDatabase backToBeginningStateDetector
		down {
		}	
  end




  connector type Singleton(transferRecordDatabase recordReplica, validityReportPortNew detectorPort)
		define recordReplica detectorPort
		
		on recordReplica detectorPort
			down {
			}
  end
  
  connector type Singleton2(performCheckInsideDatabase recordReplica, validityReportPortNew detectorPort)
		define recordReplica detectorPort
		
		on recordReplica detectorPort
			down {
			}
  end
  
  connector type RealSingleton(performCheckInsideDatabase recordReplica)
		define recordReplica
		
		on recordReplica
			down {
			}
  end
  
  connector type RealSingleton2(validityReportPort recordReplica)
		define recordReplica
		
		on recordReplica
			down {
			}
  end
  
  connector type RealSingleton3(transferRecordDatabase recordReplica)
		define recordReplica
		
		on recordReplica
			down {
			}
  end
  
  
  connector type IncreaseHealth(transferRecordDatabase recordReplica, validityReportPortNew detectorPort)
		define recordReplica detectorPort
		
		on recordReplica detectorPort provided(detectorPort.validValidityReport == true && recordReplica.replicaID == detectorPort.replicaIDValidityReport && recordReplica.consecutiveFaultyReports > 0)
			down {
				recordReplica.consecutiveFaultyReports = recordReplica.consecutiveFaultyReports - 1;
			}
  end
  
  connector type NoIncreaseHealth(transferRecordDatabase recordReplica, validityReportPortNew detectorPort)
		define recordReplica detectorPort
		
		on recordReplica detectorPort provided(detectorPort.validValidityReport == true && recordReplica.replicaID == detectorPort.replicaIDValidityReport && recordReplica.consecutiveFaultyReports == 0)
			down {
			}
  end
  
  
  connector type DecreaseHealth(transferRecordDatabase recordReplica, validityReportPortNew detectorPort)
		define recordReplica detectorPort
		
		on recordReplica detectorPort provided(detectorPort.validValidityReport == false && recordReplica.replicaID == detectorPort.replicaIDValidityReport)
			down {
				recordReplica.consecutiveFaultyReports = recordReplica.consecutiveFaultyReports + 1;
			}
  end
  
  

// let's work with 3 detectors
  compound type DetectorsSimulation
    component DetectorReplica dr1(1)
    component Masker m1(1)
    
    component DatabaseReplicas db1(1)
    
    // connectors are needed in order to simulate the reception of a validity report
    // some checks are needed (maybe guards?) in order to enable only the right transitions!
    connector TransferValidityReport fromMaskerToDetectors(m1.sendReport, dr1.receiveReportNew) //, dr2.receiveReportNew, dr3.receiveReportNew)
  
	// here we don't know what what is the replica described in the validity report
	// this check is performed by the PerformUpdateDatabase connector
    
	connector BeginUpdateDatabase startUpdate11(db1.chooseRecord1, dr1.chooseRecord)
    connector BeginUpdateDatabase startUpdate12(db1.chooseRecord2, dr1.chooseRecord)
    connector BeginUpdateDatabase startUpdate13(db1.chooseRecord3, dr1.chooseRecord)
    
 
    connector Singleton update11(db1.update1, dr1.update)
    connector Singleton update12(db1.update2, dr1.update)
    connector Singleton update13(db1.update3, dr1.update)
 
  
    connector Singleton noUpdate11(db1.noUpdate1, dr1.noUpdate)
    connector Singleton noUpdate12(db1.noUpdate2, dr1.noUpdate)
    connector Singleton noUpdate13(db1.noUpdate3, dr1.noUpdate)

    
    
    
    connector Singleton performCheckDelay11(db1.performCheckDelay1, dr1.performCheckDelay)
    connector Singleton performCheckDelay12(db1.performCheckDelay2, dr1.performCheckDelay)
    connector Singleton performCheckDelay13(db1.performCheckDelay3, dr1.performCheckDelay)
    
 
    
    connector Singleton2 performCheckCrash11(db1.performCheckCrash1, dr1.performCheckCrash)
    connector Singleton2 performCheckCrash12(db1.performCheckCrash2, dr1.performCheckCrash)
    connector Singleton2 performCheckCrash13(db1.performCheckCrash3, dr1.performCheckCrash)
    
  
    connector Singleton2 performCheckDetectors11(db1.performCheckDetectors1, dr1.performCheckDetectors)
    connector Singleton2 performCheckDetectors12(db1.performCheckDetectors2, dr1.performCheckDetectors)
    connector Singleton2 performCheckDetectors13(db1.performCheckDetectors3, dr1.performCheckDetectors)
   
    
    connector Singleton2 backToBeginningState11(db1.backToBeginningState, dr1.backToBeginningState)

    
    connector RealSingleton init11(db1.init1)
    connector RealSingleton init12(db1.init2)
    connector RealSingleton init13(db1.init3)
    
    
    
    connector RealSingleton2 generate(m1.generateReport)
    
    
    connector IncreaseHealth nonFaultyReportIncrease11(db1.nonFaultyReport1, dr1.nonFaultyReport)
    connector IncreaseHealth nonFaultyReportIncrease12(db1.nonFaultyReport2, dr1.nonFaultyReport)
    connector IncreaseHealth nonFaultyReportIncrease13(db1.nonFaultyReport3, dr1.nonFaultyReport)
    
    
    connector NoIncreaseHealth nonFaultyReport11(db1.nonFaultyReport1, dr1.nonFaultyReport)
    connector NoIncreaseHealth nonFaultyReport12(db1.nonFaultyReport2, dr1.nonFaultyReport)
    connector NoIncreaseHealth nonFaultyReport13(db1.nonFaultyReport3, dr1.nonFaultyReport)
    
    
    connector DecreaseHealth faultyReport11(db1.faultyReport1, dr1.faultyReport)
    connector DecreaseHealth faultyReport12(db1.faultyReport2, dr1.faultyReport)
    connector DecreaseHealth faultyReport13(db1.faultyReport3, dr1.faultyReport)  
    
    
    connector RealSingleton3 detectDelayfault11(db1.detectDelayFault1)
    connector RealSingleton3 detectDelayfault12(db1.detectDelayFault2)
    connector RealSingleton3 detectDelayfault13(db1.detectDelayFault3)
    
    connector RealSingleton3 noDetectDelayfault11(db1.noDetectDelayFault1)
    connector RealSingleton3 noDetectDelayfault12(db1.noDetectDelayFault2)
    connector RealSingleton3 noDetectDelayfault13(db1.noDetectDelayFault3)
    
    
    connector RealSingleton3 continue11(db1.continue1)
    connector RealSingleton3 continue12(db1.continue2)
    connector RealSingleton3 continue13(db1.continue3)
    
    connector RealSingleton3 finish11(db1.finish1)
    connector RealSingleton3 finish12(db1.finish2)
    connector RealSingleton3 finish13(db1.finish3)
    
    connector RealSingleton3 detectCrashFault11(db1.detectCrashFault1)
    connector RealSingleton3 detectCrashFault12(db1.detectCrashFault2)
    connector RealSingleton3 detectCrashFault13(db1.detectCrashFault3)
    
    connector RealSingleton3 continueCrash11(db1.continueCrash1)
    connector RealSingleton3 continueCrash12(db1.continueCrash2)
    connector RealSingleton3 continueCrash13(db1.continueCrash3)
    
    connector RealSingleton3 noDetectCrashFault1(db1.noDetectCrashFault1)
    connector RealSingleton3 noDetectCrashFault2(db1.noDetectCrashFault2)
    connector RealSingleton3 noDetectCrashFault3(db1.noDetectCrashFault3)
    
  end
  
	component DetectorsSimulation start
end
