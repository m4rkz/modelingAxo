//@cpp(src="ext-cpp/detector.cpp",include="detector.hpp")
//@cpp(src="ext-cpp/report.cpp",include="report.hpp")
@cpp(src="ext-cpp-third/detector.cpp,ext-cpp-third/report.cpp",include="detector.hpp,report.hpp")

// no need for tagger now

package FourthRefinement

  // only one external type: the validity report (generated by the dummy masker)
  extern data type report_t

  // only simple external functions: prints and getters (they are necessary if we deal with an external type)
  extern function printf(string, int, int)
  extern function printf(string)
  extern function printf(string, int)
  extern function printf(string, bool)

  port type innerTransition()
    
  port type transferRecordDatabase(int replicaIDofTheDetectorOwningTheDB, int replicaID, int lastControllerTSReplica, int lastDetectorTSReplica, int firstControllerTSReplica, int healthReplica, bool validityReplica)
 
  port type validityReportPort(report_t report)
  port type checkValidityReportPort(report_t report, int detectorTimestamp, int detectorHealth)
  
  port type validityReportPortNew(int replicaIDValidityReport, int controllerTimestampValidityReport, int detectorTimestampValidityReport, int healthValidityReport, bool validValidityReport)

  port type performCheckWithDatabaseAndReports(int result, int replicaIDValidityReport, int controllerTimestampValidityReport, int detectorTimestampValidityReport, int healthValidityReport, bool validValidityReport)

  port type performCheckInsideDatabase()

  atom type Masker(int id) 
    data int replicaID
    data report_t myValidityReport
    
    // validity report fields
    data int replicaIDValidityReport
	data int controllerTimestampValidityReport
	data int detectorTimestampValidityReport
	data int healthValidityReport
	data bool validValidityReport
	
	data int controllerTimestampGenerator
	data int detectorTimestampGenerator
    
    export port validityReportPortNew sendReport(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)
    port validityReportPort generateReport(myValidityReport)


    place HAVE_A_REPORT_TO_SEND, REPORT_SENT

	// this part can be changed, if we want to perform tests with different reports
    initial to HAVE_A_REPORT_TO_SEND
	do {
		replicaID = id;
		printf("The dummy masker has been initialized. Generating a validity report to send to the detectors...\n");
		
		controllerTimestampGenerator = 5;
		detectorTimestampGenerator = 7;
		
		replicaIDValidityReport = replicaID;
		controllerTimestampValidityReport = controllerTimestampGenerator;
		detectorTimestampValidityReport = detectorTimestampGenerator;
		healthValidityReport = 8;
		validValidityReport = false;
		
		controllerTimestampGenerator = controllerTimestampGenerator + 10;
		detectorTimestampGenerator = detectorTimestampGenerator + 2;
		
		printf("Generated!\n");
	}

    on sendReport from HAVE_A_REPORT_TO_SEND to REPORT_SENT
    on generateReport from REPORT_SENT to HAVE_A_REPORT_TO_SEND
		do {
			printf("Generating a validity report to send to the detectors...\n");
		
			replicaIDValidityReport = replicaID;
			controllerTimestampValidityReport = controllerTimestampGenerator;
			detectorTimestampValidityReport = detectorTimestampGenerator;
			healthValidityReport = 8;
			validValidityReport = false;
			
			controllerTimestampGenerator = controllerTimestampGenerator + 10;
			detectorTimestampGenerator = detectorTimestampGenerator + 2;
			
			printf("Generated!\n");
		}
  end
  
  atom type DatabaseReplicas(int id) 
    data int ownerID
    
    data int replicaID1
	data int lastControllerTSReplica1
	data int lastDetectorTSReplica1
	data int firstControllerTSReplica1
	data int healthReplica1
	data bool validityReplica1
	
	data int replicaID2
	data int lastControllerTSReplica2
	data int lastDetectorTSReplica2
	data int firstControllerTSReplica2
	data int healthReplica2
	data bool validityReplica2
	
	data int replicaID3
	data int lastControllerTSReplica3
	data int lastDetectorTSReplica3
	data int firstControllerTSReplica3
	data int healthReplica3
	data bool validityReplica3
	
	export port transferRecordDatabase recordReplica1(ownerID, replicaID1, lastControllerTSReplica1, lastDetectorTSReplica1, firstControllerTSReplica1, healthReplica1, validityReplica1)
	export port transferRecordDatabase recordReplica2(ownerID, replicaID2, lastControllerTSReplica2, lastDetectorTSReplica2, firstControllerTSReplica2, healthReplica2, validityReplica2)
	export port transferRecordDatabase recordReplica3(ownerID, replicaID3, lastControllerTSReplica3, lastDetectorTSReplica3, firstControllerTSReplica3, healthReplica3, validityReplica3)

	//export port transferRecordDatabase performCheckDelayReplica1(ownerID, replicaID1, lastControllerTSReplica1, lastDetectorTSReplica1, firstControllerTSReplica1, healthReplica1, validityReplica1)
	//export port transferRecordDatabase performCheckDelayReplica2(ownerID, replicaID2, lastControllerTSReplica2, lastDetectorTSReplica2, firstControllerTSReplica2, healthReplica2, validityReplica2)
	//export port transferRecordDatabase performCheckDelayReplica3(ownerID, replicaID3, lastControllerTSReplica3, lastDetectorTSReplica3, firstControllerTSReplica3, healthReplica3, validityReplica3)

	export port performCheckInsideDatabase performCheckCrashReplica()
	// it is not worth to do the following, because these checks can be done locally with the information kept by the database
	//export port transferRecordDatabase performCheckCrashReplica(ownerID, replicaID1, lastControllerTSReplica1, lastDetectorTSReplica1, firstControllerTSReplica1, healthReplica1, validityReplica1)
	//export port transferRecordDatabase performCheckCrashReplica2(ownerID, replicaID2, lastControllerTSReplica2, lastDetectorTSReplica2, firstControllerTSReplica2, healthReplica2, validityReplica2)
	//export port transferRecordDatabase performCheckCrashReplica3(ownerID, replicaID3, lastControllerTSReplica3, lastDetectorTSReplica3, firstControllerTSReplica3, healthReplica3, validityReplica3)

	export port performCheckInsideDatabase performCheckDetectorsReplica()



	export port transferRecordDatabase chooseRecord1(ownerID, replicaID1, lastControllerTSReplica1, lastDetectorTSReplica1, firstControllerTSReplica1, healthReplica1, validityReplica1)
	export port transferRecordDatabase chooseRecord2(ownerID, replicaID2, lastControllerTSReplica2, lastDetectorTSReplica2, firstControllerTSReplica2, healthReplica2, validityReplica2)
	export port transferRecordDatabase chooseRecord3(ownerID, replicaID3, lastControllerTSReplica3, lastDetectorTSReplica3, firstControllerTSReplica3, healthReplica3, validityReplica3)


	export port transferRecordDatabase newValidityReport1(ownerID, replicaID1, lastControllerTSReplica1, lastDetectorTSReplica1, firstControllerTSReplica1, healthReplica1, validityReplica1)
	export port transferRecordDatabase newValidityReport2(ownerID, replicaID2, lastControllerTSReplica2, lastDetectorTSReplica2, firstControllerTSReplica2, healthReplica2, validityReplica2)
	export port transferRecordDatabase newValidityReport3(ownerID, replicaID3, lastControllerTSReplica3, lastDetectorTSReplica3, firstControllerTSReplica3, healthReplica3, validityReplica3)

	export port transferRecordDatabase sameValidityReport1(ownerID, replicaID1, lastControllerTSReplica1, lastDetectorTSReplica1, firstControllerTSReplica1, healthReplica1, validityReplica1)
	export port transferRecordDatabase sameValidityReport2(ownerID, replicaID2, lastControllerTSReplica2, lastDetectorTSReplica2, firstControllerTSReplica2, healthReplica2, validityReplica2)
	export port transferRecordDatabase sameValidityReport3(ownerID, replicaID3, lastControllerTSReplica3, lastDetectorTSReplica3, firstControllerTSReplica3, healthReplica3, validityReplica3)

	export port transferRecordDatabase oldValidityReport1(ownerID, replicaID1, lastControllerTSReplica1, lastDetectorTSReplica1, firstControllerTSReplica1, healthReplica1, validityReplica1)
	export port transferRecordDatabase oldValidityReport2(ownerID, replicaID2, lastControllerTSReplica2, lastDetectorTSReplica2, firstControllerTSReplica2, healthReplica2, validityReplica2)
	export port transferRecordDatabase oldValidityReport3(ownerID, replicaID3, lastControllerTSReplica3, lastDetectorTSReplica3, firstControllerTSReplica3, healthReplica3, validityReplica3)

	// from NEW_REPORT1 to NEED_TO_CHECK_ID1
	export port transferRecordDatabase updateDetectorTS1(ownerID, replicaID1, lastControllerTSReplica1, lastDetectorTSReplica1, firstControllerTSReplica1, healthReplica1, validityReplica1)
	export port transferRecordDatabase noUpdateDetectorTS1(ownerID, replicaID1, lastControllerTSReplica1, lastDetectorTSReplica1, firstControllerTSReplica1, healthReplica1, validityReplica1)

	// from NEW_REPORT2 to NEED_TO_CHECK_ID2
	export port transferRecordDatabase updateDetectorTS2(ownerID, replicaID2, lastControllerTSReplica2, lastDetectorTSReplica2, firstControllerTSReplica2, healthReplica2, validityReplica2)
	export port transferRecordDatabase noUpdateDetectorTS2(ownerID, replicaID2, lastControllerTSReplica2, lastDetectorTSReplica2, firstControllerTSReplica2, healthReplica2, validityReplica2)
	
	// from NEW_REPORT3 to NEED_TO_CHECK_ID3
	export port transferRecordDatabase updateDetectorTS3(ownerID, replicaID3, lastControllerTSReplica3, lastDetectorTSReplica3, firstControllerTSReplica3, healthReplica3, validityReplica3)
	export port transferRecordDatabase noUpdateDetectorTS3(ownerID, replicaID3, lastControllerTSReplica3, lastDetectorTSReplica3, firstControllerTSReplica3, healthReplica3, validityReplica3)



	// from NEED_TO_CHECK_ID1 to NEED_TO_CHECK_VALIDITY1
	export port transferRecordDatabase updateHealth1(ownerID, replicaID1, lastControllerTSReplica1, lastDetectorTSReplica1, firstControllerTSReplica1, healthReplica1, validityReplica1)
	export port transferRecordDatabase noUpdateHealth1(ownerID, replicaID1, lastControllerTSReplica1, lastDetectorTSReplica1, firstControllerTSReplica1, healthReplica1, validityReplica1)

	// from NEED_TO_CHECK_ID2 to NEED_TO_CHECK_VALIDITY2
	export port transferRecordDatabase updateHealth2(ownerID, replicaID2, lastControllerTSReplica2, lastDetectorTSReplica2, firstControllerTSReplica2, healthReplica2, validityReplica2)
	export port transferRecordDatabase noUpdateHealth2(ownerID, replicaID2, lastControllerTSReplica2, lastDetectorTSReplica2, firstControllerTSReplica2, healthReplica2, validityReplica2)

	// from NEED_TO_CHECK_ID3 to NEED_TO_CHECK_VALIDITY3
	export port transferRecordDatabase updateHealth3(ownerID, replicaID3, lastControllerTSReplica3, lastDetectorTSReplica3, firstControllerTSReplica3, healthReplica3, validityReplica3)
	export port transferRecordDatabase noUpdateHealth3(ownerID, replicaID3, lastControllerTSReplica3, lastDetectorTSReplica3, firstControllerTSReplica3, healthReplica3, validityReplica3)




	// from NEED_TO_CHECK_VALIDITY1 to END_UPDATE1
	export port transferRecordDatabase increaseHealth1(ownerID, replicaID1, lastControllerTSReplica1, lastDetectorTSReplica1, firstControllerTSReplica1, healthReplica1, validityReplica1)
	export port transferRecordDatabase decreaseHealth1(ownerID, replicaID1, lastControllerTSReplica1, lastDetectorTSReplica1, firstControllerTSReplica1, healthReplica1, validityReplica1)

	// from NEED_TO_CHECK_VALIDITY2 to END_UPDATE2
	export port transferRecordDatabase increaseHealth2(ownerID, replicaID2, lastControllerTSReplica2, lastDetectorTSReplica2, firstControllerTSReplica2, healthReplica2, validityReplica2)
	export port transferRecordDatabase decreaseHealth2(ownerID, replicaID2, lastControllerTSReplica2, lastDetectorTSReplica2, firstControllerTSReplica2, healthReplica2, validityReplica2)

	// from NEED_TO_CHECK_VALIDITY3 to END_UPDATE3
	export port transferRecordDatabase increaseHealth3(ownerID, replicaID3, lastControllerTSReplica3, lastDetectorTSReplica3, firstControllerTSReplica3, healthReplica3, validityReplica3)
	export port transferRecordDatabase decreaseHealth3(ownerID, replicaID3, lastControllerTSReplica3, lastDetectorTSReplica3, firstControllerTSReplica3, healthReplica3, validityReplica3)




	// from END_UPDATE1 to READY_TO_CHECK1
	export port transferRecordDatabase finishUpdate1(ownerID, replicaID1, lastControllerTSReplica1, lastDetectorTSReplica1, firstControllerTSReplica1, healthReplica1, validityReplica1)

	// from END_UPDATE2 to READY_TO_CHECK2
	export port transferRecordDatabase finishUpdate2(ownerID, replicaID2, lastControllerTSReplica2, lastDetectorTSReplica2, firstControllerTSReplica2, healthReplica2, validityReplica2)

	// from END_UPDATE3 to READY_TO_CHECK3
	export port transferRecordDatabase finishUpdate3(ownerID, replicaID3, lastControllerTSReplica3, lastDetectorTSReplica3, firstControllerTSReplica3, healthReplica3, validityReplica3)



	// from SAME_REPORT1 to ANOTHER_ID_CHECK1
	export port transferRecordDatabase anotherUpdateDetectorTS1(ownerID, replicaID1, lastControllerTSReplica1, lastDetectorTSReplica1, firstControllerTSReplica1, healthReplica1, validityReplica1)
	export port transferRecordDatabase anotherNoUpdateDetectorTS1(ownerID, replicaID1, lastControllerTSReplica1, lastDetectorTSReplica1, firstControllerTSReplica1, healthReplica1, validityReplica1)

	// from SAME_REPORT2 to ANOTHER_ID_CHECK2
	export port transferRecordDatabase anotherUpdateDetectorTS2(ownerID, replicaID2, lastControllerTSReplica2, lastDetectorTSReplica2, firstControllerTSReplica2, healthReplica2, validityReplica2)
	export port transferRecordDatabase anotherNoUpdateDetectorTS2(ownerID, replicaID2, lastControllerTSReplica2, lastDetectorTSReplica2, firstControllerTSReplica2, healthReplica2, validityReplica2)

	// from SAME_REPORT3 to ANOTHER_ID_CHECK3
	export port transferRecordDatabase anotherUpdateDetectorTS3(ownerID, replicaID3, lastControllerTSReplica3, lastDetectorTSReplica3, firstControllerTSReplica3, healthReplica3, validityReplica3)
	export port transferRecordDatabase anotherNoUpdateDetectorTS3(ownerID, replicaID3, lastControllerTSReplica3, lastDetectorTSReplica3, firstControllerTSReplica3, healthReplica3, validityReplica3)



	// from ANOTHER_ID_CHECK1 to END_UPDATE1
	export port transferRecordDatabase anotherUpdateHealth1(ownerID, replicaID1, lastControllerTSReplica1, lastDetectorTSReplica1, firstControllerTSReplica1, healthReplica1, validityReplica1)
	export port transferRecordDatabase anotherNoUpdateHealth1(ownerID, replicaID1, lastControllerTSReplica1, lastDetectorTSReplica1, firstControllerTSReplica1, healthReplica1, validityReplica1)

	// from ANOTHER_ID_CHECK2 to END_UPDATE2
	export port transferRecordDatabase anotherUpdateHealth2(ownerID, replicaID2, lastControllerTSReplica2, lastDetectorTSReplica2, firstControllerTSReplica2, healthReplica2, validityReplica2)
	export port transferRecordDatabase anotherNoUpdateHealth2(ownerID, replicaID2, lastControllerTSReplica2, lastDetectorTSReplica2, firstControllerTSReplica2, healthReplica2, validityReplica2)

	// from ANOTHER_ID_CHECK3 to END_UPDATE3
	export port transferRecordDatabase anotherUpdateHealth3(ownerID, replicaID3, lastControllerTSReplica3, lastDetectorTSReplica3, firstControllerTSReplica3, healthReplica3, validityReplica3)
	export port transferRecordDatabase anotherNoUpdateHealth3(ownerID, replicaID3, lastControllerTSReplica3, lastDetectorTSReplica3, firstControllerTSReplica3, healthReplica3, validityReplica3)



	// from READY_TO_CHECK1 to FINISHED_CHECKING_DELAY1
	export port transferRecordDatabase internalDetectCrashController1(ownerID, replicaID1, lastControllerTSReplica1, lastDetectorTSReplica1, firstControllerTSReplica1, healthReplica1, validityReplica1)
	export port transferRecordDatabase externalDetectCrashController1(ownerID, replicaID1, lastControllerTSReplica1, lastDetectorTSReplica1, firstControllerTSReplica1, healthReplica1, validityReplica1)
	export port transferRecordDatabase crashControllerNotDetected1(ownerID, replicaID1, lastControllerTSReplica1, lastDetectorTSReplica1, firstControllerTSReplica1, healthReplica1, validityReplica1)


	// from READY_TO_CHECK1 to FINISHED_CHECKING_DELAY2
	export port transferRecordDatabase internalDetectCrashController2(ownerID, replicaID2, lastControllerTSReplica2, lastDetectorTSReplica2, firstControllerTSReplica2, healthReplica2, validityReplica2)
	export port transferRecordDatabase externalDetectCrashController2(ownerID, replicaID2, lastControllerTSReplica2, lastDetectorTSReplica2, firstControllerTSReplica2, healthReplica2, validityReplica2)
	export port transferRecordDatabase crashControllerNotDetected2(ownerID, replicaID2, lastControllerTSReplica2, lastDetectorTSReplica2, firstControllerTSReplica2, healthReplica2, validityReplica2)



	// from READY_TO_CHECK1 to FINISHED_CHECKING_DELAY3
	export port transferRecordDatabase internalDetectCrashController3(ownerID, replicaID3, lastControllerTSReplica3, lastDetectorTSReplica3, firstControllerTSReplica3, healthReplica3, validityReplica3)
	export port transferRecordDatabase externalDetectCrashController3(ownerID, replicaID3, lastControllerTSReplica3, lastDetectorTSReplica3, firstControllerTSReplica3, healthReplica3, validityReplica3)
	export port transferRecordDatabase crashControllerNotDetected3(ownerID, replicaID3, lastControllerTSReplica3, lastDetectorTSReplica3, firstControllerTSReplica3, healthReplica3, validityReplica3)


	port innerTransition timestampController1Max()
	port innerTransition timestampController2Max()
	port innerTransition timestampController3Max()
	
	port innerTransition maxGreaterThanControllerTS1External()
	port innerTransition maxGreaterThanControllerTS1Internal()
	port innerTransition maxSmallerThanControllerTS1()
	
	port innerTransition maxGreaterThanControllerTS2External()
	port innerTransition maxGreaterThanControllerTS2Internal()
	port innerTransition maxSmallerThanControllerTS2()
	
	port innerTransition maxGreaterThanControllerTS3External()
	port innerTransition maxGreaterThanControllerTS3Internal()
	port innerTransition maxSmallerThanControllerTS3()
	
	
	port innerTransition timestampDetector1Max()
	port innerTransition timestampDetector2Max()
	port innerTransition timestampDetector3Max()
	
	port innerTransition maxGreaterThanDetectorTS1External()
	port innerTransition maxGreaterThanDetectorTS2External()
	port innerTransition maxGreaterThanDetectorTS3External()


	port innerTransition noDetectorTS1External()
	port innerTransition noDetectorTS2External()
	port innerTransition noDetectorTS3External()
	
	
	port innerTransition init1()
	port innerTransition init2()
	port innerTransition init3()


	// maybe temporary
	export port performCheckInsideDatabase backToBeginningState()


	data int maxControllerTS
	data int maxDetectorTS

	//place START, READY_TO_UPDATE, CHOSEN_RECORD
	
	// NEW_REPORT, SAME_REPORT, GREATER_DETECTOR_TS_VR, NEED_TO_CHECK_ID, READY_TO_CHECK, CHECKING_DELAY, CHECKING_CRASH, CHECKING_DETECTORS
	
	// new set of places: some of them will be the same in the detectors
	// this is needed to keep the DB and the detector synchronized
	place START, READY_TO_UPDATE, CHOSEN_RECORD1, CHOSEN_RECORD2, CHOSEN_RECORD3,
	 NEW_REPORT1, SAME_REPORT1, NEED_TO_CHECK_ID1, NEED_TO_CHECK_VALIDITY1, END_UPDATE1, READY_TO_CHECK1, ANOTHER_ID_CHECK1,
	 NEW_REPORT2, SAME_REPORT2, NEED_TO_CHECK_ID2, NEED_TO_CHECK_VALIDITY2, END_UPDATE2, READY_TO_CHECK2, ANOTHER_ID_CHECK2,
	 NEW_REPORT3, SAME_REPORT3, NEED_TO_CHECK_ID3, NEED_TO_CHECK_VALIDITY3, END_UPDATE3, READY_TO_CHECK3, ANOTHER_ID_CHECK3,
	 FINISHED_CHECK_DELAY1, FINISHED_CHECK_DELAY2, FINISHED_CHECK_DELAY3,
	 READY_TO_CHECK, CHECKING_DELAY, CHECKING_CRASH, CHECKING_DETECTORS,
	 DETERMINED_MAX_CONTROLLER_TS, // 3 different transitions
	 LAST_CONTROLLER1_TS_CHECKED, LAST_CONTROLLER2_TS_CHECKED, 
	 START_CHECKING_CRASH,
	 START_CHECKING_DETECTORS, DETERMINED_MAX_DETECTOR_TS, LAST_DETECTOR1_CHECKED, LAST_DETECTOR2_CHECKED,
	 CHECKING_CRASH1
	// the transitions for crash detection are internal

	// initialize the database. This part is based on the detector on which the database is located
	
	initial to START
		do {
			replicaID1 = 1; replicaID2 = 2; replicaID3 = 3;
			ownerID = id;
		}
	
	on init1 from START to READY_TO_UPDATE provided (ownerID == 1)
		do {
			printf("DB of the replica 1\n");
			lastControllerTSReplica1 = 0;
			lastDetectorTSReplica1 = 0;
			firstControllerTSReplica1 = 0;
			healthReplica1 = 127;
			validityReplica1 = true;
		}
	on init2 from START to READY_TO_UPDATE provided (ownerID == 2)
		do {
			printf("DB of the replica 2\n");
			lastControllerTSReplica2 = 0;
			lastDetectorTSReplica2 = 0;
			firstControllerTSReplica2 = 0;
			healthReplica2 = 127;
			validityReplica2 = true;
		}
	on init3 from START to READY_TO_UPDATE provided (ownerID == 3)
		do {
			printf("DB of the replica 3\n");
			lastControllerTSReplica3 = 0;
			lastDetectorTSReplica3 = 0;
			firstControllerTSReplica3 = 0;
			healthReplica3 = 127;
			validityReplica3 = true;
		}
		
			
	//	}
	
	//on recordReplica1 from START to START do { printf("Adding the record related to replica 1 to the DB (on the detector %d)\n", ownerID); }
	//on recordReplica2 from START to START do { printf("Adding the record related to replica 2 to the DB (on the detector %d)\n", ownerID); }
	//on recordReplica3 from START to START do { printf("Adding the record related to replica 3 to the DB (on the detector %d)\n", ownerID); }
	
	// to choose the record to work on
	
	on chooseRecord1 from READY_TO_UPDATE to CHOSEN_RECORD1 do { printf("Adding the record related to replica 1 to the DB (on the DATABASE %d)\n", ownerID); }
	on chooseRecord2 from READY_TO_UPDATE to CHOSEN_RECORD2 do { printf("Adding the record related to replica 2 to the DB (on the DATABASE %d)\n", ownerID); }
	on chooseRecord3 from READY_TO_UPDATE to CHOSEN_RECORD3 do { printf("Adding the record related to replica 3 to the DB (on the DATABASE %d)\n", ownerID); }
	
	// these are the 3 possibilities once a record is chosen. All these paths should lead to the READY_TO_CHECK state
	// in a finite number of steps
	on newValidityReport1 from CHOSEN_RECORD1 to NEW_REPORT1
	on sameValidityReport1 from CHOSEN_RECORD1 to SAME_REPORT1
	on oldValidityReport1 from CHOSEN_RECORD1 to READY_TO_CHECK // it means that it does not need to update the DB
	
	
	on anotherUpdateDetectorTS1 from SAME_REPORT1 to ANOTHER_ID_CHECK1
	on anotherNoUpdateDetectorTS1 from SAME_REPORT1 to ANOTHER_ID_CHECK1
	
	on anotherUpdateHealth1 from ANOTHER_ID_CHECK1 to END_UPDATE1
	on anotherNoUpdateHealth1 from ANOTHER_ID_CHECK1 to END_UPDATE1
	
	
	on updateDetectorTS1 from NEW_REPORT1 to NEED_TO_CHECK_ID1
	on noUpdateDetectorTS1 from NEW_REPORT1 to NEED_TO_CHECK_ID1
	
	
	on updateHealth1 from NEED_TO_CHECK_ID1 to NEED_TO_CHECK_VALIDITY1
	on noUpdateHealth1 from NEED_TO_CHECK_ID1 to NEED_TO_CHECK_VALIDITY1
	
	
	on increaseHealth1 from NEED_TO_CHECK_VALIDITY1 to END_UPDATE1
	on decreaseHealth1 from NEED_TO_CHECK_VALIDITY1 to END_UPDATE1

	
	on finishUpdate1 from END_UPDATE1 to READY_TO_CHECK1
	
	
	
	on newValidityReport2 from CHOSEN_RECORD2 to NEW_REPORT2
	on sameValidityReport2 from CHOSEN_RECORD2 to SAME_REPORT2
	on oldValidityReport2 from CHOSEN_RECORD2 to READY_TO_CHECK // it means that it does not need to update the DB
	
	
	on anotherUpdateDetectorTS2 from SAME_REPORT2 to ANOTHER_ID_CHECK2
	on anotherNoUpdateDetectorTS2 from SAME_REPORT2 to ANOTHER_ID_CHECK2
	
	on anotherUpdateHealth2 from ANOTHER_ID_CHECK2 to END_UPDATE2
	on anotherNoUpdateHealth2 from ANOTHER_ID_CHECK2 to END_UPDATE2
	
	
	on updateDetectorTS2 from NEW_REPORT2 to NEED_TO_CHECK_ID2
	on noUpdateDetectorTS2 from NEW_REPORT2 to NEED_TO_CHECK_ID2
	
	
	on updateHealth2 from NEED_TO_CHECK_ID2 to NEED_TO_CHECK_VALIDITY2
	on noUpdateHealth2 from NEED_TO_CHECK_ID2 to NEED_TO_CHECK_VALIDITY2
	
	
	on increaseHealth2 from NEED_TO_CHECK_VALIDITY2 to END_UPDATE2
	on decreaseHealth2 from NEED_TO_CHECK_VALIDITY2 to END_UPDATE2

	
	on finishUpdate2 from END_UPDATE2 to READY_TO_CHECK2
	
	
	
	on newValidityReport3 from CHOSEN_RECORD3 to NEW_REPORT3
	on sameValidityReport3 from CHOSEN_RECORD3 to SAME_REPORT3
	on oldValidityReport3 from CHOSEN_RECORD3 to READY_TO_CHECK // it means that it does not need to update the DB
	
	
	on anotherUpdateDetectorTS3 from SAME_REPORT3 to ANOTHER_ID_CHECK3
	on anotherNoUpdateDetectorTS3 from SAME_REPORT3 to ANOTHER_ID_CHECK3
	
	on anotherUpdateHealth3 from ANOTHER_ID_CHECK3 to END_UPDATE3
	on anotherNoUpdateHealth3 from ANOTHER_ID_CHECK3 to END_UPDATE3
	
	
	on updateDetectorTS3 from NEW_REPORT3 to NEED_TO_CHECK_ID3
	on noUpdateDetectorTS3 from NEW_REPORT3 to NEED_TO_CHECK_ID3
	
	
	on updateHealth3 from NEED_TO_CHECK_ID3 to NEED_TO_CHECK_VALIDITY3
	on noUpdateHealth3 from NEED_TO_CHECK_ID3 to NEED_TO_CHECK_VALIDITY3
	
	
	on increaseHealth3 from NEED_TO_CHECK_VALIDITY3 to END_UPDATE3
	on decreaseHealth3 from NEED_TO_CHECK_VALIDITY3 to END_UPDATE3

	
	on finishUpdate3 from END_UPDATE3 to READY_TO_CHECK3
	
	
	
	on internalDetectCrashController1 from READY_TO_CHECK1 to CHECKING_DELAY
	on externalDetectCrashController1 from READY_TO_CHECK1 to CHECKING_DELAY
	on crashControllerNotDetected1 from READY_TO_CHECK1 to CHECKING_DELAY
	
	
	
	on internalDetectCrashController2 from READY_TO_CHECK2 to CHECKING_DELAY
	on externalDetectCrashController2 from READY_TO_CHECK2 to CHECKING_DELAY
	on crashControllerNotDetected2 from READY_TO_CHECK2 to CHECKING_DELAY


	on internalDetectCrashController3 from READY_TO_CHECK3 to CHECKING_DELAY
	on externalDetectCrashController3 from READY_TO_CHECK3 to CHECKING_DELAY
	on crashControllerNotDetected3 from READY_TO_CHECK3 to CHECKING_DELAY

  
	on performCheckCrashReplica from CHECKING_DELAY to START_CHECKING_CRASH
		do {
			printf("synchronize with detector\n");
			
		}
	
	// main idea: after performing the check of delay, there will be one state for checking the crashes of
	// controllers and one for crashes of detectors. 
	
	on timestampController1Max from START_CHECKING_CRASH to DETERMINED_MAX_CONTROLLER_TS provided(lastControllerTSReplica1 > lastControllerTSReplica2 && lastControllerTSReplica1 > lastControllerTSReplica3)
		do {
			printf("the maximum timestamp is the one of replica1\n");
			maxControllerTS = lastControllerTSReplica1;
		}
	on timestampController2Max from START_CHECKING_CRASH to DETERMINED_MAX_CONTROLLER_TS provided(lastControllerTSReplica2 > lastControllerTSReplica1 && lastControllerTSReplica2 > lastControllerTSReplica3)
		do {
			printf("the maximum timestamp is the one of replica2\n");
			maxControllerTS = lastControllerTSReplica2;
		}
	on timestampController3Max from START_CHECKING_CRASH to DETERMINED_MAX_CONTROLLER_TS provided(lastControllerTSReplica3 >= lastControllerTSReplica1 && lastControllerTSReplica3 >= lastControllerTSReplica2)
		do {
			printf("the maximum timestamp is the one of replica3\n");
			maxControllerTS = lastControllerTSReplica3;
		}
		
	// checking crash on record1
	on maxGreaterThanControllerTS1External from DETERMINED_MAX_CONTROLLER_TS to LAST_CONTROLLER1_TS_CHECKED provided(maxControllerTS > lastControllerTSReplica1 + 2000 && replicaID1 != ownerID)
		do {
			printf("External detect: talk with the rebooter and erase\n");
		}
	on maxGreaterThanControllerTS1Internal from DETERMINED_MAX_CONTROLLER_TS to LAST_CONTROLLER1_TS_CHECKED provided(maxControllerTS > lastControllerTSReplica1 + 2000 && replicaID1 == ownerID)
		do {
			printf("Internal detect: talk with the rebooter\n");
		}
	on maxSmallerThanControllerTS1 from DETERMINED_MAX_CONTROLLER_TS to LAST_CONTROLLER1_TS_CHECKED provided(maxControllerTS <= lastControllerTSReplica1 + 2000)
		do {
			printf("No detection\n");
		}
	
	// checking crash on record2
	on maxGreaterThanControllerTS2External from LAST_CONTROLLER1_TS_CHECKED to LAST_CONTROLLER2_TS_CHECKED provided(maxControllerTS > lastControllerTSReplica2 + 2000 && replicaID2 != ownerID)
		do {
			printf("External detect: talk with the rebooter and erase\n");
		}
	on maxGreaterThanControllerTS2Internal from LAST_CONTROLLER1_TS_CHECKED to LAST_CONTROLLER2_TS_CHECKED provided(maxControllerTS > lastControllerTSReplica2 + 2000 && replicaID2 == ownerID)
		do {
			printf("Internal detect: talk with the rebooter\n");
		}
	on maxSmallerThanControllerTS2 from LAST_CONTROLLER1_TS_CHECKED to LAST_CONTROLLER2_TS_CHECKED provided(maxControllerTS <= lastControllerTSReplica2 + 2000)
		do {
			printf("No detection\n");
		}
	
	// checking crash on record3
	on maxGreaterThanControllerTS3External from LAST_CONTROLLER2_TS_CHECKED to CHECKING_CRASH provided(maxControllerTS > lastControllerTSReplica3 + 2000 && replicaID3 != ownerID)
		do {
			printf("External detect: talk with the rebooter and erase\n");
		}
	on maxGreaterThanControllerTS3Internal from LAST_CONTROLLER2_TS_CHECKED to CHECKING_CRASH provided(maxControllerTS > lastControllerTSReplica3 + 2000 && replicaID3 == ownerID)
		do {
			printf("Internal detect: talk with the rebooter\n");
		}
	on maxSmallerThanControllerTS3 from LAST_CONTROLLER2_TS_CHECKED to CHECKING_CRASH provided(maxControllerTS <= lastControllerTSReplica3 + 2000)
		do {
			printf("No detection\n");
		}
	
		
	//on performCheckDetectorsReplica from CHECKING_CRASH to CHECKING_DETECTORS
	on performCheckDetectorsReplica from CHECKING_CRASH to START_CHECKING_DETECTORS
		
	on timestampDetector1Max from START_CHECKING_DETECTORS to DETERMINED_MAX_DETECTOR_TS provided(lastDetectorTSReplica1 > lastDetectorTSReplica2 && lastDetectorTSReplica1 > lastDetectorTSReplica3)
		do {
			printf("the maximum timestamp is the one of replica1\n");
			maxDetectorTS = lastDetectorTSReplica1;
		}
	on timestampDetector2Max from START_CHECKING_DETECTORS to DETERMINED_MAX_DETECTOR_TS provided(lastDetectorTSReplica2 > lastDetectorTSReplica1 && lastDetectorTSReplica2 > lastDetectorTSReplica3)
		do {
			printf("the maximum timestamp is the one of replica2\n");
			maxDetectorTS = lastDetectorTSReplica2;
		}
	on timestampDetector3Max from START_CHECKING_DETECTORS to DETERMINED_MAX_DETECTOR_TS provided(lastDetectorTSReplica3 >= lastDetectorTSReplica1 && lastDetectorTSReplica3 >= lastDetectorTSReplica2)
		do {
			printf("the maximum timestamp is the one of replica3\n");
			maxDetectorTS = lastDetectorTSReplica3;
		}
	
	
	
	
	
	on maxGreaterThanDetectorTS1External from DETERMINED_MAX_DETECTOR_TS to LAST_DETECTOR1_CHECKED provided(  replicaID1 != ownerID && ( (lastDetectorTSReplica1 == 0 && lastControllerTSReplica1 > firstControllerTSReplica1 + 2000) ||
					(lastDetectorTSReplica1 != 0 && maxDetectorTS > lastDetectorTSReplica1 + 2000)  ) )
		do {
			printf("External detect: talk with the rebooter and erase\n");
		}
	on noDetectorTS1External from DETERMINED_MAX_DETECTOR_TS to LAST_DETECTOR1_CHECKED provided(replicaID1 == ownerID || !((lastDetectorTSReplica1 == 0 && lastControllerTSReplica1 > firstControllerTSReplica1 + 2000) ||
					(lastDetectorTSReplica1 != 0 && maxDetectorTS > lastDetectorTSReplica1 + 2000))   )
		do {
			printf("No external detect\n");
		}
	
	on maxGreaterThanDetectorTS2External from LAST_DETECTOR1_CHECKED to LAST_DETECTOR2_CHECKED provided(  replicaID2 != ownerID && ( (lastDetectorTSReplica2 == 0 && lastControllerTSReplica2 > firstControllerTSReplica2 + 2000) ||
					(lastDetectorTSReplica2 != 0 && maxDetectorTS > lastDetectorTSReplica2 + 2000)  ) )
		do {
			printf("External detect: talk with the rebooter and erase\n");
		}
		
	on noDetectorTS2External from LAST_DETECTOR1_CHECKED to LAST_DETECTOR2_CHECKED provided(replicaID2 == ownerID || !((lastDetectorTSReplica2 == 0 && lastControllerTSReplica2 > firstControllerTSReplica2 + 2000) ||
					(lastDetectorTSReplica2 != 0 && maxDetectorTS > lastDetectorTSReplica2 + 2000))   )
		do {
			printf("No external detect\n");
		}


	on maxGreaterThanDetectorTS3External from LAST_DETECTOR2_CHECKED to CHECKING_DETECTORS provided(  replicaID3 != ownerID && ( (lastDetectorTSReplica3 == 0 && lastControllerTSReplica3 > firstControllerTSReplica3 + 2000) ||
					(lastDetectorTSReplica3 != 0 && maxDetectorTS > lastDetectorTSReplica3 + 2000)  ) )
		do {
			printf("External detect: talk with the rebooter and erase\n");
		}
		
	on noDetectorTS3External from LAST_DETECTOR2_CHECKED to CHECKING_DETECTORS provided(replicaID3 == ownerID || !((lastDetectorTSReplica3 == 0 && lastControllerTSReplica3 > firstControllerTSReplica3 + 2000) ||
					(lastDetectorTSReplica3 != 0 && maxDetectorTS > lastDetectorTSReplica3 + 2000))   )
		do {
			printf("No external detect\n");
		}
	
	
		
	on backToBeginningState from CHECKING_DETECTORS to READY_TO_UPDATE
  
  end

  atom type DetectorReplica(int id)
    // variables of the detector
    data int replicaID
    data int detectorTimestamp
    data int detectorHealth
    
    data int checkResultDelay
    data int checkResultCrash
    data int checkResultDetectors
    
    // validity report variables
    data int replicaIDValidityReport
	data int controllerTimestampValidityReport
	data int detectorTimestampValidityReport
	data int healthValidityReport
	data bool validValidityReport
	
	export port validityReportPortNew receiveReportNew(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)

   // export port validityReportPortNew updateDatabaseNew(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)
    


    export port validityReportPortNew chooseRecord(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)
    
    export port validityReportPortNew newValidityReport(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)
	export port validityReportPortNew sameValidityReport(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)
	export port validityReportPortNew oldValidityReport(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)

	// from NEW_REPORT to NEED_TO_CHECK
	export port validityReportPortNew updateDetectorTS(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)
	export port validityReportPortNew noUpdateDetectorTS(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)

	// from NEED_TO_CHECK to NEED_TO_CHECK_VALIDITY
	export port validityReportPortNew updateHealth(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)
	export port validityReportPortNew noUpdateHealth(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)

	// from NEED_TO_CHECK_VALIDITY to END_UPDATE
	export port validityReportPortNew increaseHealth(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)
	export port validityReportPortNew decreaseHealth(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)

	// from END_UPDATE to READY_TO_CHECK
	export port validityReportPortNew finishUpdate(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)

	
	// from SAME_REPORT1 to ANOTHER_ID_CHECK
	export port validityReportPortNew anotherUpdateDetectorTS(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)
	export port validityReportPortNew anotherNoUpdateDetectorTS(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)

	// from ANOTHER_ID_CHECK1 to END_UPDATE
	export port validityReportPortNew anotherUpdateHealth(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)
	export port validityReportPortNew anotherNoUpdateHealth(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)


	// from READY_TO_CHECK to FINISHED_CHECKING_DELAY
	export port validityReportPortNew internalDetectCrashController(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)
	export port validityReportPortNew externalDetectCrashController(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)
	export port validityReportPortNew crashControllerNotDetected(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)

	
    
    
    // maybe these 2 could be replaced with ports without parameters? Or maybe one parameter could be useful: a variable saying the outcome of the check
    // the issue will come when the results of the checks have to be communicated to the rebooter. It may result in additional ports (i.e. change of the design)
    //export port validityReportPortNew performCheckDelay(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)
    export port performCheckWithDatabaseAndReports performCheckDelay(checkResultDelay, replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)

    //export port validityReportPortNew performCheckCrash(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)
    export port performCheckWithDatabaseAndReports performCheckCrash(checkResultCrash, replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)

	//export port validityReportPortNew performCheckDetectors(replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)
	export port performCheckWithDatabaseAndReports performCheckDetectors(checkResultDetectors, replicaIDValidityReport, controllerTimestampValidityReport, detectorTimestampValidityReport, healthValidityReport, validValidityReport)

    
    port innerTransition performCheckCrashAndNotifyRebooter()
    port innerTransition performCheckDetectorsAndNotifyRebooter()
    
    export port innerTransition backToBeginningState()
    port innerTransition backToBeginningStateNotifyRebooter() // the type of this port has to be changed!!
        
	//place READY_TO_RECEIVE_REPORT, REPORT_RECEIVED, READY_TO_CHECK, CHECKING_DELAY, CHECKING_CRASH, CHECKING_DETECTORS

	// let's use some common states for the update of the DB: there are some states with the same name as the databases'
	place READY_TO_RECEIVE_REPORT, REPORT_RECEIVED,
	 CHOSEN_RECORD, NEW_REPORT, SAME_REPORT, NEED_TO_CHECK_ID, NEED_TO_CHECK_VALIDITY, READY_TO_CHECK,
	 END_UPDATE, ANOTHER_ID_CHECK, FINISHED_CHECKING_DELAY,
	 CHECKING_DELAY, CHECKING_CRASH, CHECKING_DETECTORS


	// the database should initialize itself, on its own
    initial to READY_TO_RECEIVE_REPORT
      do { 	replicaID = id; printf("replicaID set! Now the DB initialization..\n");
	  }

 // the the data transfer is specified in the connector
 // I have to change the port!
    on receiveReportNew from READY_TO_RECEIVE_REPORT to REPORT_RECEIVED
	do { printf("receiving report\n");  }	
	
	on chooseRecord from REPORT_RECEIVED to CHOSEN_RECORD // to choose to record to work on
		do { printf("Adding the record related to replica %d to the DB (on the detector %d)\n", replicaIDValidityReport, replicaID); }
	
		// these are the 3 possibilities once a record is chosen. All these paths should lead to the READY_TO_CHECK state
	// in a finite number of steps
	on newValidityReport from CHOSEN_RECORD to NEW_REPORT
	on sameValidityReport from CHOSEN_RECORD to SAME_REPORT
	on oldValidityReport from CHOSEN_RECORD to READY_TO_CHECK // it means that it does not need to update the DB
	
	
	on anotherUpdateDetectorTS from SAME_REPORT to ANOTHER_ID_CHECK
	on anotherNoUpdateDetectorTS from SAME_REPORT to ANOTHER_ID_CHECK
	
	on anotherUpdateHealth from ANOTHER_ID_CHECK to END_UPDATE
	on anotherNoUpdateHealth from ANOTHER_ID_CHECK to END_UPDATE
	
	
	
	on updateDetectorTS from NEW_REPORT to NEED_TO_CHECK_ID
	on noUpdateDetectorTS from NEW_REPORT to NEED_TO_CHECK_ID
	
	
	on updateHealth from NEED_TO_CHECK_ID to NEED_TO_CHECK_VALIDITY
	on noUpdateHealth from NEED_TO_CHECK_ID to NEED_TO_CHECK_VALIDITY
	
	
	on increaseHealth from NEED_TO_CHECK_VALIDITY to END_UPDATE
	on decreaseHealth from NEED_TO_CHECK_VALIDITY to END_UPDATE
	
	
	on finishUpdate from END_UPDATE to READY_TO_CHECK
	
	
	
	on internalDetectCrashController from READY_TO_CHECK to CHECKING_DELAY
	on externalDetectCrashController from READY_TO_CHECK to CHECKING_DELAY
	on crashControllerNotDetected from READY_TO_CHECK to CHECKING_DELAY
	
    
    // another connector is needed here
    on performCheckCrash from CHECKING_DELAY to CHECKING_CRASH 
    do {
    
		printf("I am checking the crashes.. the work will be done inside the database\n");
	//	checkResultCrash = detect_crash(globalDB, replicaID);
		printf("checkResultCrash: %d\n", checkResultCrash);
    }
    
    
    on performCheckDetectors from CHECKING_CRASH to CHECKING_DETECTORS 
    do {
		printf("I am checking the detectors\n");
	//	checkResultDetectors = detect_detectors(globalDB, replicaID);
		printf("checkResultDetectors: %d\n", checkResultDetectors);
    }
    
    
    on backToBeginningState from CHECKING_DETECTORS to READY_TO_RECEIVE_REPORT
		do { 
			printf("still valid\n"); 
		}

  end

  connector type BeginUpdateDatabase(transferRecordDatabase chooseRecordOnDatabase, validityReportPortNew chooseRecordOnDetector)
		define chooseRecordOnDatabase chooseRecordOnDetector
		
		on chooseRecordOnDatabase chooseRecordOnDetector provided (chooseRecordOnDatabase.replicaID == chooseRecordOnDetector.replicaIDValidityReport)
		down {
			printf("I am the detector %d and I am updating the record %d\n", chooseRecordOnDatabase.replicaIDofTheDetectorOwningTheDB, chooseRecordOnDatabase.replicaID);
			printf("I need to set a proper variable!\n");
		}
  end
  
  connector type NewValidityReport(transferRecordDatabase newValidityReportOnDatabaseRecord, validityReportPortNew newValidityReportOnDetector)
		define newValidityReportOnDatabaseRecord newValidityReportOnDetector
		
		on newValidityReportOnDatabaseRecord newValidityReportOnDetector provided (newValidityReportOnDetector.controllerTimestampValidityReport > newValidityReportOnDatabaseRecord.lastControllerTSReplica)
		down {
			newValidityReportOnDatabaseRecord.lastControllerTSReplica = newValidityReportOnDetector.controllerTimestampValidityReport;
			printf("This is a new setpoint! Update controller timestamp and change the state of the DB and the detector!\n");
		}
  end
  
  connector type SameValidityReport(transferRecordDatabase sameValidityReportOnDatabaseRecord, validityReportPortNew sameValidityReportOnDetector)
		define sameValidityReportOnDatabaseRecord sameValidityReportOnDetector
		
		on sameValidityReportOnDatabaseRecord sameValidityReportOnDetector provided (sameValidityReportOnDetector.controllerTimestampValidityReport == sameValidityReportOnDatabaseRecord.lastControllerTSReplica)
		down {
			sameValidityReportOnDatabaseRecord.validityReplica = sameValidityReportOnDatabaseRecord.validityReplica || sameValidityReportOnDetector.validValidityReport;
			printf("This relates to an already performed computation! Change the state of the DB and the detector!\n");
		}
  end
  
  connector type OldValidityReport(transferRecordDatabase oldValidityReportOnDatabaseRecord, validityReportPortNew oldValidityReportOnDetector)
		define oldValidityReportOnDatabaseRecord oldValidityReportOnDetector
		
		on oldValidityReportOnDatabaseRecord oldValidityReportOnDetector provided (oldValidityReportOnDetector.controllerTimestampValidityReport < oldValidityReportOnDatabaseRecord.lastControllerTSReplica)
		down {
			printf("Too low timestamp. Updates already performed ==> this is ready to perform checks!\n");
		}
  end
  
  connector type UpdateDetectorTS(transferRecordDatabase newValidityReportOnDatabaseRecord, validityReportPortNew newValidityReportOnDetector)
		define newValidityReportOnDatabaseRecord newValidityReportOnDetector
		
		on newValidityReportOnDatabaseRecord newValidityReportOnDetector provided (newValidityReportOnDetector.detectorTimestampValidityReport > newValidityReportOnDatabaseRecord.lastDetectorTSReplica)
		down {
			printf("Update the detector timestamp on the DB\n");
			newValidityReportOnDatabaseRecord.lastDetectorTSReplica = newValidityReportOnDetector.detectorTimestampValidityReport;
		}
  end
  
  connector type NoUpdateDetectorTS(transferRecordDatabase newValidityReportOnDatabaseRecord, validityReportPortNew newValidityReportOnDetector)
		define newValidityReportOnDatabaseRecord newValidityReportOnDetector
		
		on newValidityReportOnDatabaseRecord newValidityReportOnDetector provided (newValidityReportOnDetector.detectorTimestampValidityReport <= newValidityReportOnDatabaseRecord.lastDetectorTSReplica)
		down {
			printf("No update of the detector timestamp on the DB\n");
		}
  end
  
  connector type UpdateHealth(transferRecordDatabase newValidityReportOnDatabaseRecord, validityReportPortNew newValidityReportOnDetector)
		define newValidityReportOnDatabaseRecord newValidityReportOnDetector
		
		on newValidityReportOnDatabaseRecord newValidityReportOnDetector provided (newValidityReportOnDatabaseRecord.replicaIDofTheDetectorOwningTheDB != newValidityReportOnDatabaseRecord.replicaID && newValidityReportOnDatabaseRecord.healthReplica >  newValidityReportOnDetector.healthValidityReport)
		down {
			printf("Updating health..\n");
			newValidityReportOnDatabaseRecord.healthReplica = newValidityReportOnDetector.healthValidityReport;
		}
  end  
  
  connector type NoUpdateHealth(transferRecordDatabase newValidityReportOnDatabaseRecord, validityReportPortNew newValidityReportOnDetector)
		define newValidityReportOnDatabaseRecord newValidityReportOnDetector
		
		on newValidityReportOnDatabaseRecord newValidityReportOnDetector provided (newValidityReportOnDatabaseRecord.replicaIDofTheDetectorOwningTheDB == newValidityReportOnDatabaseRecord.replicaID || newValidityReportOnDatabaseRecord.healthReplica <=  newValidityReportOnDetector.healthValidityReport)
		down {
			printf("No update on health..\n");
		}
  end  
  
  connector type IncreaseHealth(transferRecordDatabase newValidityReportOnDatabaseRecord, validityReportPortNew newValidityReportOnDetector)
		define newValidityReportOnDatabaseRecord newValidityReportOnDetector
		
		on newValidityReportOnDatabaseRecord newValidityReportOnDetector provided (newValidityReportOnDatabaseRecord.validityReplica == true)
		down {
			printf("Increasing health..\n");
			newValidityReportOnDatabaseRecord.healthReplica = (9 * newValidityReportOnDatabaseRecord.healthReplica + 1 * 127)/10;
			newValidityReportOnDatabaseRecord.validityReplica = newValidityReportOnDetector.validValidityReport;			
		}
  end  
  
  connector type DecreaseHealth(transferRecordDatabase newValidityReportOnDatabaseRecord, validityReportPortNew newValidityReportOnDetector)
		define newValidityReportOnDatabaseRecord newValidityReportOnDetector
		
		on newValidityReportOnDatabaseRecord newValidityReportOnDetector provided (newValidityReportOnDatabaseRecord.validityReplica == false)
		down {
			printf("Decreasing health..\n");
			newValidityReportOnDatabaseRecord.healthReplica = (9 * newValidityReportOnDatabaseRecord.healthReplica - 1 * 127)/10;
			newValidityReportOnDatabaseRecord.validityReplica = newValidityReportOnDetector.validValidityReport;
		}
  end   
  
  connector type FinishUpdate(transferRecordDatabase validityReportOnDatabaseRecord, validityReportPortNew validityReportOnDetector)
		define validityReportOnDatabaseRecord validityReportOnDetector
		
		on validityReportOnDatabaseRecord validityReportOnDetector
		down {
			printf("DEBUG (updated database): \n");
			printf("Record replica ID = %d\n", validityReportOnDatabaseRecord.replicaID);
			printf("lastControllerTS = %d\n", validityReportOnDetector.controllerTimestampValidityReport);
			printf("lastDetectorTSReplica = %d\n", validityReportOnDetector.detectorTimestampValidityReport);
			printf("healthReplica = %d\n", validityReportOnDatabaseRecord.healthReplica);
			printf("validityReplica = %d\n", validityReportOnDatabaseRecord.validityReplica);
			printf("Now I am ready to perform checks\n");
		}
  end 
  
  
  
  
  
  connector type AnotherUpdateHealth(transferRecordDatabase sameValidityReportOnDatabaseRecord, validityReportPortNew sameValidityReportOnDetector)
		define sameValidityReportOnDatabaseRecord sameValidityReportOnDetector
		
		on sameValidityReportOnDatabaseRecord sameValidityReportOnDetector provided (sameValidityReportOnDatabaseRecord.replicaIDofTheDetectorOwningTheDB != sameValidityReportOnDatabaseRecord.replicaID && sameValidityReportOnDatabaseRecord.healthReplica > sameValidityReportOnDetector.healthValidityReport)
		down {
			printf("Updating health..\n");
			sameValidityReportOnDatabaseRecord.healthReplica = sameValidityReportOnDetector.healthValidityReport;
		}
  end  
  
  connector type AnotherNoUpdateHealth(transferRecordDatabase sameValidityReportOnDatabaseRecord, validityReportPortNew sameValidityReportOnDetector)
		define sameValidityReportOnDatabaseRecord sameValidityReportOnDetector
		
		on sameValidityReportOnDatabaseRecord sameValidityReportOnDetector provided (sameValidityReportOnDatabaseRecord.replicaIDofTheDetectorOwningTheDB == sameValidityReportOnDatabaseRecord.replicaID || sameValidityReportOnDatabaseRecord.healthReplica <= sameValidityReportOnDetector.healthValidityReport)
		down {
			printf("No update on health..\n");
		}
  end 
  
  
  
  
  

  connector type TransferValidityReport(validityReportPortNew masker, validityReportPortNew detector1, validityReportPortNew detector2, validityReportPortNew detector3)
    define masker detector1 detector2 detector3

    on masker detector1 detector2 detector3
	// up { printf("up block!\n"); }
	down { printf("down block!\n");
		//detector1.report = masker.report; printReport(detector1.report);
		detector1.replicaIDValidityReport = masker.replicaIDValidityReport;
		detector1.controllerTimestampValidityReport = masker.controllerTimestampValidityReport;
		detector1.detectorTimestampValidityReport = masker.detectorTimestampValidityReport;
		detector1.healthValidityReport = masker.healthValidityReport;
		detector1.validValidityReport = masker.validValidityReport;
		
	//	detector2.report = masker.report; printReport(detector2.report);
		detector2.replicaIDValidityReport = masker.replicaIDValidityReport;
		detector2.controllerTimestampValidityReport = masker.controllerTimestampValidityReport;
		detector2.detectorTimestampValidityReport = masker.detectorTimestampValidityReport;
		detector2.healthValidityReport = masker.healthValidityReport;
		detector2.validValidityReport = masker.validValidityReport;
		
		
	//	detector3.report = masker.report; printReport(detector3.report);
		detector3.replicaIDValidityReport = masker.replicaIDValidityReport;
		detector3.controllerTimestampValidityReport = masker.controllerTimestampValidityReport;
		detector3.detectorTimestampValidityReport = masker.detectorTimestampValidityReport;
		detector3.healthValidityReport = masker.healthValidityReport;
		detector3.validValidityReport = masker.validValidityReport;
		
	}
  end
  
  
  connector type ExternalDetectCrashController(transferRecordDatabase performCheckDelayReplica, validityReportPortNew performCheckDelay)
	define performCheckDelayReplica performCheckDelay
	
	on performCheckDelayReplica performCheckDelay provided (performCheckDelayReplica.replicaID == performCheckDelay.replicaIDValidityReport && performCheckDelayReplica.replicaIDofTheDetectorOwningTheDB != performCheckDelay.replicaIDValidityReport && performCheckDelayReplica.healthReplica <= -8) 
		down {
			printf("External detect! I will erase this record (e.g. put all the fields to 0) and communicate with the rebooter!\n");
			performCheckDelayReplica.lastControllerTSReplica = 0;
			performCheckDelayReplica.lastDetectorTSReplica = 0;
			performCheckDelayReplica.firstControllerTSReplica = 0;
			performCheckDelayReplica.healthReplica = 0;
			performCheckDelayReplica.validityReplica = false;
		}
  
  end
  
  connector type InternalDetectCrashController(transferRecordDatabase performCheckDelayReplica, validityReportPortNew performCheckDelay) 
	define performCheckDelayReplica performCheckDelay
	
	on performCheckDelayReplica performCheckDelay provided (performCheckDelayReplica.replicaID == performCheckDelay.replicaIDValidityReport && performCheckDelayReplica.replicaIDofTheDetectorOwningTheDB == performCheckDelay.replicaIDValidityReport && performCheckDelayReplica.healthReplica <= -8) 
		down {
			printf("Internal detect! I will just communicate with the rebooter!\n");
		}
  
  end
  
  connector type CrashControllerNotDetected(transferRecordDatabase performCheckDelayReplica, validityReportPortNew performCheckDelay) 
	define performCheckDelayReplica performCheckDelay
	
	on performCheckDelayReplica performCheckDelay provided (performCheckDelayReplica.replicaID == performCheckDelay.replicaIDValidityReport && performCheckDelayReplica.healthReplica > -8) 
		down {
			printf("No detected crash on controllers!\n");
		}
  
  end
  
  

  
//  connector type PerformCheckDelay(transferRecordDatabase performCheckDelayReplica, performCheckWithDatabaseAndReports performCheckDelay) 
//	define performCheckDelayReplica performCheckDelay

//	on performCheckDelayReplica performCheckDelay provided (performCheckDelayReplica.replicaID == performCheckDelay.replicaIDValidityReport) 
//		down {
//			printf("I am checking!\n");
//			if(performCheckDelayReplica.replicaIDofTheDetectorOwningTheDB != performCheckDelay.replicaIDValidityReport && performCheckDelayReplica.healthReplica <= -8) then
//				printf("External detect! I will erase this record (e.g. put all the fields to 0) and communicate with the rebooter!\n");
//				performCheckDelayReplica.lastControllerTSReplica = 0;
//				performCheckDelayReplica.lastDetectorTSReplica = 0;
//				performCheckDelayReplica.firstControllerTSReplica = 0;
//				performCheckDelayReplica.healthReplica = 0;
//				performCheckDelayReplica.validityReplica = false;
//			else 
//				if (performCheckDelayReplica.replicaIDofTheDetectorOwningTheDB == performCheckDelay.replicaIDValidityReport && performCheckDelayReplica.healthReplica <= 8) then
//					printf("Internal detect! I will just communicate with the rebooter!\n");
//				fi
//			fi
//		}

 // end
  
    connector type PerformCheckCrash(performCheckInsideDatabase performCheckCrashReplica, performCheckWithDatabaseAndReports performCheckCrash)
	define performCheckCrashReplica performCheckCrash
	
	on performCheckCrashReplica performCheckCrash
		down {
			printf("Checking crash!\n");
		
		}
  end
  
  connector type PerformCheckDetectors(performCheckInsideDatabase performCheckDetectorsReplica, performCheckWithDatabaseAndReports performCheckDetectors)
	define performCheckDetectorsReplica performCheckDetectors
	
	on performCheckDetectorsReplica performCheckDetectors
		down {
			printf("Checking detectors crash!\n");
		
		}	
  end
  
  connector type BackToBeginningState(performCheckInsideDatabase backToBeginningStateDatabase, innerTransition backToBeginningStateDetector)
	define backToBeginningStateDatabase backToBeginningStateDetector
	
	on backToBeginningStateDatabase backToBeginningStateDetector
		down {
			printf("Checking detectors crash!\n");
		
		}	
  end

// let's work with 3 detectors
  compound type DetectorsSimulation()
    component DetectorReplica dr1(1), dr2(2), dr3(3)
    component Masker m1(1)
    
    component DatabaseReplicas db1(1), db2(2), db3(3)
    
    // connectors are needed in order to simulate the reception of a validity report
    // some checks are needed (maybe guards?) in order to enable only the right transitions!
    connector TransferValidityReport fromMaskerToDetectors(m1.sendReport, dr1.receiveReportNew, dr2.receiveReportNew, dr3.receiveReportNew)
  
	// here we don't know what what is the replica described in the validity report
	// this check is performed by the PerformUpdateDatabase connector
    

    connector BeginUpdateDatabase startUpdate11(db1.chooseRecord1, dr1.chooseRecord)
    connector BeginUpdateDatabase startUpdate12(db1.chooseRecord2, dr1.chooseRecord)
    connector BeginUpdateDatabase startUpdate13(db1.chooseRecord3, dr1.chooseRecord)
    
    connector BeginUpdateDatabase startUpdate21(db2.chooseRecord1, dr2.chooseRecord)
    connector BeginUpdateDatabase startUpdate22(db2.chooseRecord2, dr2.chooseRecord)
    connector BeginUpdateDatabase startUpdate23(db2.chooseRecord3, dr2.chooseRecord)
  
	connector BeginUpdateDatabase startUpdate31(db3.chooseRecord1, dr3.chooseRecord)
    connector BeginUpdateDatabase startUpdate32(db3.chooseRecord2, dr3.chooseRecord)
    connector BeginUpdateDatabase startUpdate33(db3.chooseRecord3, dr3.chooseRecord)
      
    
    connector NewValidityReport newValidityReport11(db1.newValidityReport1, dr1.newValidityReport)
    connector NewValidityReport newValidityReport12(db1.newValidityReport2, dr1.newValidityReport)
    connector NewValidityReport newValidityReport13(db1.newValidityReport3, dr1.newValidityReport)
    
    connector NewValidityReport newValidityReport21(db2.newValidityReport1, dr2.newValidityReport)
    connector NewValidityReport newValidityReport22(db2.newValidityReport2, dr2.newValidityReport)
    connector NewValidityReport newValidityReport23(db2.newValidityReport3, dr2.newValidityReport)
    
    connector NewValidityReport newValidityReport31(db3.newValidityReport1, dr3.newValidityReport)
    connector NewValidityReport newValidityReport32(db3.newValidityReport2, dr3.newValidityReport)
    connector NewValidityReport newValidityReport33(db3.newValidityReport3, dr3.newValidityReport)
    
    
    connector SameValidityReport sameValidityReport11(db1.sameValidityReport1, dr1.sameValidityReport)
    connector SameValidityReport sameValidityReport12(db1.sameValidityReport2, dr1.sameValidityReport)
    connector SameValidityReport sameValidityReport13(db1.sameValidityReport3, dr1.sameValidityReport)
   
    connector SameValidityReport sameValidityReport21(db2.sameValidityReport1, dr2.sameValidityReport)
    connector SameValidityReport sameValidityReport22(db2.sameValidityReport2, dr2.sameValidityReport)
    connector SameValidityReport sameValidityReport23(db2.sameValidityReport3, dr2.sameValidityReport)
   
    connector SameValidityReport sameValidityReport31(db3.sameValidityReport1, dr3.sameValidityReport)
    connector SameValidityReport sameValidityReport32(db3.sameValidityReport2, dr3.sameValidityReport)
    connector SameValidityReport sameValidityReport33(db3.sameValidityReport3, dr3.sameValidityReport)


    connector OldValidityReport oldValidityReport11(db1.oldValidityReport1, dr1.oldValidityReport)
    connector OldValidityReport oldValidityReport12(db1.oldValidityReport2, dr1.oldValidityReport)
    connector OldValidityReport oldValidityReport13(db1.oldValidityReport3, dr1.oldValidityReport)
    
	connector OldValidityReport oldValidityReport21(db2.oldValidityReport1, dr2.oldValidityReport)
    connector OldValidityReport oldValidityReport22(db2.oldValidityReport2, dr2.oldValidityReport)
    connector OldValidityReport oldValidityReport23(db2.oldValidityReport3, dr2.oldValidityReport)
   
    connector OldValidityReport oldValidityReport31(db3.oldValidityReport1, dr3.oldValidityReport)
    connector OldValidityReport oldValidityReport32(db3.oldValidityReport2, dr3.oldValidityReport)
    connector OldValidityReport oldValidityReport33(db3.oldValidityReport3, dr3.oldValidityReport)
	

	connector UpdateDetectorTS updateDetectorTS11(db1.updateDetectorTS1, dr1.updateDetectorTS)
	connector UpdateDetectorTS updateDetectorTS12(db1.updateDetectorTS2, dr1.updateDetectorTS)
	connector UpdateDetectorTS updateDetectorTS13(db1.updateDetectorTS3, dr1.updateDetectorTS)
	
	connector UpdateDetectorTS updateDetectorTS21(db2.updateDetectorTS1, dr2.updateDetectorTS)
	connector UpdateDetectorTS updateDetectorTS22(db2.updateDetectorTS2, dr2.updateDetectorTS)
	connector UpdateDetectorTS updateDetectorTS23(db2.updateDetectorTS3, dr2.updateDetectorTS)
	
	connector UpdateDetectorTS updateDetectorTS31(db3.updateDetectorTS1, dr3.updateDetectorTS)
	connector UpdateDetectorTS updateDetectorTS32(db3.updateDetectorTS2, dr3.updateDetectorTS)
	connector UpdateDetectorTS updateDetectorTS33(db3.updateDetectorTS3, dr3.updateDetectorTS)

	
	// when it refers to an already received VR
	connector UpdateDetectorTS anotherUpdateDetectorTS11(db1.anotherUpdateDetectorTS1, dr1.anotherUpdateDetectorTS)
	connector UpdateDetectorTS anotherUpdateDetectorTS12(db1.anotherUpdateDetectorTS2, dr1.anotherUpdateDetectorTS)
	connector UpdateDetectorTS anotherUpdateDetectorTS13(db1.anotherUpdateDetectorTS3, dr1.anotherUpdateDetectorTS)
	
	connector UpdateDetectorTS anotherUpdateDetectorTS21(db2.anotherUpdateDetectorTS1, dr2.anotherUpdateDetectorTS)
	connector UpdateDetectorTS anotherUpdateDetectorTS22(db2.anotherUpdateDetectorTS2, dr2.anotherUpdateDetectorTS)
	connector UpdateDetectorTS anotherUpdateDetectorTS23(db2.anotherUpdateDetectorTS3, dr2.anotherUpdateDetectorTS)
	
	connector UpdateDetectorTS anotherUpdateDetectorTS31(db3.anotherUpdateDetectorTS1, dr3.anotherUpdateDetectorTS)
	connector UpdateDetectorTS anotherUpdateDetectorTS32(db3.anotherUpdateDetectorTS2, dr3.anotherUpdateDetectorTS)
	connector UpdateDetectorTS anotherUpdateDetectorTS33(db3.anotherUpdateDetectorTS3, dr3.anotherUpdateDetectorTS)
	
	
	
	


	connector NoUpdateDetectorTS noUpdateDetectorTS11(db1.noUpdateDetectorTS1, dr1.noUpdateDetectorTS)
	connector NoUpdateDetectorTS noUpdateDetectorTS12(db1.noUpdateDetectorTS2, dr1.noUpdateDetectorTS)
	connector NoUpdateDetectorTS noUpdateDetectorTS13(db1.noUpdateDetectorTS3, dr1.noUpdateDetectorTS)
	
	connector NoUpdateDetectorTS noUpdateDetectorTS21(db2.noUpdateDetectorTS1, dr2.noUpdateDetectorTS)
	connector NoUpdateDetectorTS noUpdateDetectorTS22(db2.noUpdateDetectorTS2, dr2.noUpdateDetectorTS)
	connector NoUpdateDetectorTS noUpdateDetectorTS23(db2.noUpdateDetectorTS3, dr2.noUpdateDetectorTS)
	
	connector NoUpdateDetectorTS noUpdateDetectorTS31(db3.noUpdateDetectorTS1, dr3.noUpdateDetectorTS)
	connector NoUpdateDetectorTS noUpdateDetectorTS32(db3.noUpdateDetectorTS2, dr3.noUpdateDetectorTS)
	connector NoUpdateDetectorTS noUpdateDetectorTS33(db3.noUpdateDetectorTS3, dr3.noUpdateDetectorTS)


	// when it refers to an already received VR	
	connector NoUpdateDetectorTS anotherNoUpdateDetectorTS11(db1.anotherNoUpdateDetectorTS1, dr1.anotherNoUpdateDetectorTS)
	connector NoUpdateDetectorTS anotherNoUpdateDetectorTS12(db1.anotherNoUpdateDetectorTS2, dr1.anotherNoUpdateDetectorTS)
	connector NoUpdateDetectorTS anotherNoUpdateDetectorTS13(db1.anotherNoUpdateDetectorTS3, dr1.anotherNoUpdateDetectorTS)
	
	connector NoUpdateDetectorTS anotherNoUpdateDetectorTS21(db2.anotherNoUpdateDetectorTS1, dr2.anotherNoUpdateDetectorTS)
	connector NoUpdateDetectorTS anotherNoUpdateDetectorTS22(db2.anotherNoUpdateDetectorTS2, dr2.anotherNoUpdateDetectorTS)
	connector NoUpdateDetectorTS anotherNoUpdateDetectorTS23(db2.anotherNoUpdateDetectorTS3, dr2.anotherNoUpdateDetectorTS)
	
	connector NoUpdateDetectorTS anotherNoUpdateDetectorTS31(db3.anotherNoUpdateDetectorTS1, dr3.anotherNoUpdateDetectorTS)
	connector NoUpdateDetectorTS anotherNoUpdateDetectorTS32(db3.anotherNoUpdateDetectorTS2, dr3.anotherNoUpdateDetectorTS)
	connector NoUpdateDetectorTS anotherNoUpdateDetectorTS33(db3.anotherNoUpdateDetectorTS3, dr3.anotherNoUpdateDetectorTS)
	
	
	


	
	  
	connector UpdateHealth updateHealth11(db1.updateHealth1, dr1.updateHealth)
	connector UpdateHealth updateHealth12(db1.updateHealth2, dr1.updateHealth)
	connector UpdateHealth updateHealth13(db1.updateHealth3, dr1.updateHealth)
	
	connector UpdateHealth updateHealth21(db2.updateHealth1, dr2.updateHealth)
	connector UpdateHealth updateHealth22(db2.updateHealth2, dr2.updateHealth)
	connector UpdateHealth updateHealth23(db2.updateHealth3, dr2.updateHealth)
	
	connector UpdateHealth updateHealth31(db3.updateHealth1, dr3.updateHealth)
	connector UpdateHealth updateHealth32(db3.updateHealth2, dr3.updateHealth)
	connector UpdateHealth updateHealth33(db3.updateHealth3, dr3.updateHealth)
	
	
	connector UpdateHealth anotherUpdateHealth11(db1.anotherUpdateHealth1, dr1.anotherUpdateHealth)
	connector UpdateHealth anotherUpdateHealth12(db1.anotherUpdateHealth2, dr1.anotherUpdateHealth)
	connector UpdateHealth anotherUpdateHealth13(db1.anotherUpdateHealth3, dr1.anotherUpdateHealth)
	
	connector UpdateHealth anotherUpdateHealth21(db2.anotherUpdateHealth1, dr2.anotherUpdateHealth)
	connector UpdateHealth anotherUpdateHealth22(db2.anotherUpdateHealth2, dr2.anotherUpdateHealth)
	connector UpdateHealth anotherUpdateHealth23(db2.anotherUpdateHealth3, dr2.anotherUpdateHealth)
	
	connector UpdateHealth anotherUpdateHealth31(db3.anotherUpdateHealth1, dr3.anotherUpdateHealth)
	connector UpdateHealth anotherUpdateHealth32(db3.anotherUpdateHealth2, dr3.anotherUpdateHealth)
	connector UpdateHealth anotherUpdateHealth33(db3.anotherUpdateHealth3, dr3.anotherUpdateHealth)
	
	
	
	
	 
	connector NoUpdateHealth noUpdateHealth11(db1.noUpdateHealth1, dr1.noUpdateHealth)
	connector NoUpdateHealth noUpdateHealth12(db1.noUpdateHealth2, dr1.noUpdateHealth)
	connector NoUpdateHealth noUpdateHealth13(db1.noUpdateHealth3, dr1.noUpdateHealth)
	
	connector NoUpdateHealth noUpdateHealth21(db2.noUpdateHealth1, dr2.noUpdateHealth)
	connector NoUpdateHealth noUpdateHealth22(db2.noUpdateHealth2, dr2.noUpdateHealth)
	connector NoUpdateHealth noUpdateHealth23(db2.noUpdateHealth3, dr2.noUpdateHealth)
	
	connector NoUpdateHealth noUpdateHealth31(db3.noUpdateHealth1, dr3.noUpdateHealth)
	connector NoUpdateHealth noUpdateHealth32(db3.noUpdateHealth2, dr3.noUpdateHealth)
	connector NoUpdateHealth noUpdateHealth33(db3.noUpdateHealth3, dr3.noUpdateHealth)
	
	
	connector NoUpdateHealth anotherNoUpdateHealth11(db1.anotherNoUpdateHealth1, dr1.anotherNoUpdateHealth)
	connector NoUpdateHealth anotherNoUpdateHealth12(db1.anotherNoUpdateHealth2, dr1.anotherNoUpdateHealth)
	connector NoUpdateHealth anotherNoUpdateHealth13(db1.anotherNoUpdateHealth3, dr1.anotherNoUpdateHealth)
	
	connector NoUpdateHealth anotherNoUpdateHealth21(db2.anotherNoUpdateHealth1, dr2.anotherNoUpdateHealth)
	connector NoUpdateHealth anotherNoUpdateHealth22(db2.anotherNoUpdateHealth2, dr2.anotherNoUpdateHealth)
	connector NoUpdateHealth anotherNoUpdateHealth23(db2.anotherNoUpdateHealth3, dr2.anotherNoUpdateHealth)
	
	connector NoUpdateHealth anotherNoUpdateHealth31(db3.anotherNoUpdateHealth1, dr3.anotherNoUpdateHealth)
	connector NoUpdateHealth anotherNoUpdateHealth32(db3.anotherNoUpdateHealth2, dr3.anotherNoUpdateHealth)
	connector NoUpdateHealth anotherNoUpdateHealth33(db3.anotherNoUpdateHealth3, dr3.anotherNoUpdateHealth)
	


	connector IncreaseHealth increaseHealth11(db1.increaseHealth1, dr1.increaseHealth)
	connector IncreaseHealth increaseHealth12(db1.increaseHealth2, dr1.increaseHealth)
	connector IncreaseHealth increaseHealth13(db1.increaseHealth3, dr1.increaseHealth)
	
	connector IncreaseHealth increaseHealth21(db2.increaseHealth1, dr2.increaseHealth)
	connector IncreaseHealth increaseHealth22(db2.increaseHealth2, dr2.increaseHealth)
	connector IncreaseHealth increaseHealth23(db2.increaseHealth3, dr2.increaseHealth)
	
	connector IncreaseHealth increaseHealth31(db3.increaseHealth1, dr3.increaseHealth)
	connector IncreaseHealth increaseHealth32(db3.increaseHealth2, dr3.increaseHealth)
	connector IncreaseHealth increaseHealth33(db3.increaseHealth3, dr3.increaseHealth)
	
	
	
	connector DecreaseHealth decreaseHealth11(db1.decreaseHealth1, dr1.decreaseHealth)
	connector DecreaseHealth decreaseHealth12(db1.decreaseHealth2, dr1.decreaseHealth)
	connector DecreaseHealth decreaseHealth13(db1.decreaseHealth3, dr1.decreaseHealth)

	connector DecreaseHealth decreaseHealth21(db2.decreaseHealth1, dr2.decreaseHealth)
	connector DecreaseHealth decreaseHealth22(db2.decreaseHealth2, dr2.decreaseHealth)
	connector DecreaseHealth decreaseHealth23(db2.decreaseHealth3, dr2.decreaseHealth)
	
	  
	connector DecreaseHealth decreaseHealth31(db3.decreaseHealth1, dr3.decreaseHealth)
	connector DecreaseHealth decreaseHealth32(db3.decreaseHealth2, dr3.decreaseHealth)
	connector DecreaseHealth decreaseHealth33(db3.decreaseHealth3, dr3.decreaseHealth)
	  
	  
	  
	connector FinishUpdate finishUpdate11(db1.finishUpdate1, dr1.finishUpdate)
	connector FinishUpdate finishUpdate12(db1.finishUpdate2, dr1.finishUpdate)
	connector FinishUpdate finishUpdate13(db1.finishUpdate3, dr1.finishUpdate)
 
	connector FinishUpdate finishUpdate21(db2.finishUpdate1, dr2.finishUpdate)
	connector FinishUpdate finishUpdate22(db2.finishUpdate2, dr2.finishUpdate)
	connector FinishUpdate finishUpdate23(db2.finishUpdate3, dr2.finishUpdate)

	connector FinishUpdate finishUpdate31(db3.finishUpdate1, dr3.finishUpdate)
	connector FinishUpdate finishUpdate32(db3.finishUpdate2, dr3.finishUpdate)
	connector FinishUpdate finishUpdate33(db3.finishUpdate3, dr3.finishUpdate)
    
    
    
    
    
    // the structure of this remains the same. The difference is that it is not an atomic operation anymore.
    
   // connector PerformCheckDelay checkDelay11(db1.performCheckDelayReplica1, dr1.performCheckDelay)
   // connector PerformCheckDelay checkDelay12(db1.performCheckDelayReplica2, dr1.performCheckDelay)
   // connector PerformCheckDelay checkDelay13(db1.performCheckDelayReplica3, dr1.performCheckDelay)
    
   // connector PerformCheckDelay checkDelay21(db2.performCheckDelayReplica1, dr2.performCheckDelay)
   // connector PerformCheckDelay checkDelay22(db2.performCheckDelayReplica2, dr2.performCheckDelay)
   // connector PerformCheckDelay checkDelay23(db2.performCheckDelayReplica3, dr2.performCheckDelay)
    
   // connector PerformCheckDelay checkDelay31(db3.performCheckDelayReplica1, dr3.performCheckDelay)
   // connector PerformCheckDelay checkDelay32(db3.performCheckDelayReplica2, dr3.performCheckDelay)
   // connector PerformCheckDelay checkDelay33(db3.performCheckDelayReplica3, dr3.performCheckDelay)
    
    connector InternalDetectCrashController internalDetectCrashController11(db1.internalDetectCrashController1, dr1.internalDetectCrashController)
    connector ExternalDetectCrashController externalDetectCrashController11(db1.externalDetectCrashController1, dr1.externalDetectCrashController)
    connector CrashControllerNotDetected crashControllerNotDetected11(db1.crashControllerNotDetected1, dr1.crashControllerNotDetected)
    
    
    connector InternalDetectCrashController internalDetectCrashController12(db1.internalDetectCrashController2, dr1.internalDetectCrashController)
    connector ExternalDetectCrashController externalDetectCrashController12(db1.externalDetectCrashController2, dr1.externalDetectCrashController)
    connector CrashControllerNotDetected crashControllerNotDetected12(db1.crashControllerNotDetected2, dr1.crashControllerNotDetected)
    
    
    connector InternalDetectCrashController internalDetectCrashController13(db1.internalDetectCrashController3, dr1.internalDetectCrashController)
    connector ExternalDetectCrashController externalDetectCrashController13(db1.externalDetectCrashController3, dr1.externalDetectCrashController)
    connector CrashControllerNotDetected crashControllerNotDetected13(db1.crashControllerNotDetected3, dr1.crashControllerNotDetected)
    
    
    connector InternalDetectCrashController internalDetectCrashController21(db2.internalDetectCrashController1, dr2.internalDetectCrashController)
    connector ExternalDetectCrashController externalDetectCrashController21(db2.externalDetectCrashController1, dr2.externalDetectCrashController)
    connector CrashControllerNotDetected crashControllerNotDetected21(db2.crashControllerNotDetected1, dr2.crashControllerNotDetected)
    
    
    connector InternalDetectCrashController internalDetectCrashController22(db2.internalDetectCrashController2, dr2.internalDetectCrashController)
    connector ExternalDetectCrashController externalDetectCrashController22(db2.externalDetectCrashController2, dr2.externalDetectCrashController)
    connector CrashControllerNotDetected crashControllerNotDetected22(db2.crashControllerNotDetected2, dr2.crashControllerNotDetected)
    
    
    connector InternalDetectCrashController internalDetectCrashController23(db2.internalDetectCrashController3, dr2.internalDetectCrashController)
    connector ExternalDetectCrashController externalDetectCrashController23(db2.externalDetectCrashController3, dr2.externalDetectCrashController)
    connector CrashControllerNotDetected crashControllerNotDetected23(db2.crashControllerNotDetected3, dr2.crashControllerNotDetected)
    
    
    
    connector InternalDetectCrashController internalDetectCrashController31(db3.internalDetectCrashController1, dr3.internalDetectCrashController)
    connector ExternalDetectCrashController externalDetectCrashController31(db3.externalDetectCrashController1, dr3.externalDetectCrashController)
    connector CrashControllerNotDetected crashControllerNotDetected31(db3.crashControllerNotDetected1, dr3.crashControllerNotDetected)
    
    
    connector InternalDetectCrashController internalDetectCrashController32(db3.internalDetectCrashController2, dr3.internalDetectCrashController)
    connector ExternalDetectCrashController externalDetectCrashController32(db3.externalDetectCrashController2, dr3.externalDetectCrashController)
    connector CrashControllerNotDetected crashControllerNotDetected32(db3.crashControllerNotDetected2, dr3.crashControllerNotDetected)
    
    
    connector InternalDetectCrashController internalDetectCrashController33(db3.internalDetectCrashController3, dr3.internalDetectCrashController)
    connector ExternalDetectCrashController externalDetectCrashController33(db3.externalDetectCrashController3, dr3.externalDetectCrashController)
    connector CrashControllerNotDetected crashControllerNotDetected33(db3.crashControllerNotDetected3, dr3.crashControllerNotDetected)
       
    
    // no report is needed
    // this means that the steucture of this can be the same: the checks for controllers and detectors fail will be
    // internally performed by the database: the detector may receive the result, but it will play no role in
    // these computations
    connector PerformCheckCrash checkCrash1(db1.performCheckCrashReplica, dr1.performCheckCrash)
    connector PerformCheckCrash checkCrash2(db2.performCheckCrashReplica, dr2.performCheckCrash)
    connector PerformCheckCrash checkCrash3(db3.performCheckCrashReplica, dr3.performCheckCrash)
    
    
    connector PerformCheckDetectors checkDetectors1(db1.performCheckDetectorsReplica, dr1.performCheckDetectors)
    connector PerformCheckDetectors checkDetectors2(db2.performCheckDetectorsReplica, dr2.performCheckDetectors)
    connector PerformCheckDetectors checkDetectors3(db3.performCheckDetectorsReplica, dr3.performCheckDetectors)
    
    
    connector BackToBeginningState backToBeginningState1(db1.backToBeginningState, dr1.backToBeginningState)
    connector BackToBeginningState backToBeginningState2(db2.backToBeginningState, dr2.backToBeginningState)
    connector BackToBeginningState backToBeginningState3(db3.backToBeginningState, dr3.backToBeginningState)
    
    
  end
end
